<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="14949px" preserveAspectRatio="none" style="width:2071px;height:14949px;background:#FFFFFF;" version="1.1" viewBox="0 0 2071 14949" width="2071px" zoomAndPan="magnify"><defs/><g><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="107" x="10" y="7455.3076"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="87" x="20" y="7478.8428">Java 并发体系</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="180" x="167" y="1573.4277"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="160" x="177" y="1596.9629">1. Java 内存模型（JMM）</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="104" x="397" y="48.2441"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="84" x="407" y="71.7793">线程通信机制</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="551" y="20"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="561" y="43.5352">内存共享</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="79" x="677" y="20"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="59" x="687" y="43.5352">Java 采用</text><path d="M627,38.2441 L637,38.2441 C652,38.2441 652,38.2441 667,38.2441 L677,38.2441 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M501,66.4883 L511,66.4883 C526,66.4883 526,38.2441 541,38.2441 L551,38.2441 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="551" y="76.4883"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="561" y="100.0234">消息传递</text><path d="M501,66.4883 L511,66.4883 C526,66.4883 526,94.7324 541,94.7324 L551,94.7324 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M347,1591.6719 L357,1591.6719 C372,1591.6719 372,66.4883 387,66.4883 L397,66.4883 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="397" y="500.1504"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="407" y="523.6855">内存模型</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="523" y="217.709"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="533" y="241.2441">重排序</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="398" x="635" y="132.9766"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="378" x="645" y="156.5117">为了程序的性能，处理器、编译器都会对程序进行重排序处理</text><path d="M585,235.9531 L595,235.9531 C610,235.9531 610,151.2207 625,151.2207 L635,151.2207 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="635" y="217.709"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="645" y="241.2441">条件</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="258" x="733" y="189.4648"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="238" x="743" y="213">在单线程环境不能改变程序运行的结果</text><path d="M683,235.9531 L693,235.9531 C708,235.9531 708,207.709 723,207.709 L733,207.709 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="230" x="733" y="245.9531"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="210" x="743" y="269.4883">存在数据依赖关系的不允许重排序</text><path d="M683,235.9531 L693,235.9531 C708,235.9531 708,264.1973 723,264.1973 L733,264.1973 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M585,235.9531 L595,235.9531 C610,235.9531 610,235.9531 625,235.9531 L635,235.9531 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="635" y="302.4414"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="645" y="325.9766">问题</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="300" x="733" y="302.4414"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="280" x="743" y="325.9766">重排序在多线程环境下可能会导致数据不安全</text><path d="M683,320.6855 L693,320.6855 C708,320.6855 708,320.6855 723,320.6855 L733,320.6855 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M585,235.9531 L595,235.9531 C610,235.9531 610,320.6855 625,320.6855 L635,320.6855 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M473,518.3945 L483,518.3945 C498,518.3945 498,235.9531 513,235.9531 L523,235.9531 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="90" x="523" y="471.9063"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="70" x="533" y="495.4414">顺序一致性</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="202" x="663" y="358.9297"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="182" x="673" y="382.4648">多线程环境下的理论参考模型</text><path d="M613,490.1504 L623,490.1504 C638,490.1504 638,377.1738 653,377.1738 L663,377.1738 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="244" x="663" y="415.418"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="224" x="673" y="438.9531">为程序提供了极强的内存可见性保证</text><path d="M613,490.1504 L623,490.1504 C638,490.1504 638,433.6621 653,433.6621 L663,433.6621 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="663" y="528.3945"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="673" y="551.9297">特性</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="328" x="761" y="471.9063"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="308" x="771" y="495.4414">一个线程中的所有操作必须按照程序的顺序来致性</text><path d="M711,546.6387 L721,546.6387 C736,546.6387 736,490.1504 751,490.1504 L761,490.1504 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="440" x="761" y="528.3945"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="420" x="771" y="551.9297">所有的线程都只能看到一个单一的操作执行顺序，不管程序是否同步</text><path d="M711,546.6387 L721,546.6387 C736,546.6387 736,546.6387 751,546.6387 L761,546.6387 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="300" x="761" y="584.8828"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="280" x="771" y="608.418">每个操作都必须原子执行并且对所有线程可见</text><path d="M711,546.6387 L721,546.6387 C736,546.6387 736,603.127 751,603.127 L761,603.127 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M613,490.1504 L623,490.1504 C638,490.1504 638,546.6387 653,546.6387 L663,546.6387 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M473,518.3945 L483,518.3945 C498,518.3945 498,490.1504 513,490.1504 L523,490.1504 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="132" x="523" y="726.1035"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="112" x="533" y="749.6387">happens-before</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="259" x="705" y="641.3711"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="239" x="715" y="664.9063">JVM 中最核心的理论，保证内存可见性</text><path d="M655,744.3477 L665,744.3477 C680,744.3477 680,659.6152 695,659.6152 L705,659.6152 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="897" x="705" y="697.8594"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="877" x="715" y="721.3945">JVM 中，如果一个操作的执行结果需要对另一个操作可见，那么这两个操作之间必须存在 happens-before 存在数据依赖关系的不允许重排序</text><path d="M655,744.3477 L665,744.3477 C680,744.3477 680,716.1035 695,716.1035 L705,716.1035 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="705" y="782.5918"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="715" y="806.127">理论</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="868" x="803" y="754.3477"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="848" x="813" y="777.8828">如果一个操作 happens-before 另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作顺序排在第二个操作之前</text><path d="M753,800.8359 L763,800.8359 C778,800.8359 778,772.5918 793,772.5918 L803,772.5918 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="1256" x="803" y="810.8359"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="1236" x="813" y="834.3711">两个操作之前存在 happens-befoe 关系，并不意味着一定要按照 happens-before 原则指定的顺序来执行，如果，重排序之后的运行结果和 happens-before 运行结果相同，那么这种重排序不非法</text><path d="M753,800.8359 L763,800.8359 C778,800.8359 778,829.0801 793,829.0801 L803,829.0801 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M655,744.3477 L665,744.3477 C680,744.3477 680,800.8359 695,800.8359 L705,800.8359 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M473,518.3945 L483,518.3945 C498,518.3945 498,744.3477 513,744.3477 L523,744.3477 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="97" x="523" y="867.3242"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="77" x="533" y="890.8594">as-if-serial</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="594" x="670" y="867.3242"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="574" x="680" y="890.8594">所有的操作都可以为了优化而被重排序，但是你必须要保证重排序之后执行的结果不能被改变</text><path d="M620,885.5684 L630,885.5684 C645,885.5684 645,885.5684 660,885.5684 L670,885.5684 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M473,518.3945 L483,518.3945 C498,518.3945 498,885.5684 513,885.5684 L523,885.5684 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M347,1591.6719 L357,1591.6719 C372,1591.6719 372,518.3945 387,518.3945 L397,518.3945 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="112" x="397" y="1601.6719"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="92" x="407" y="1625.207">synchronized</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="118" x="559" y="923.8125"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="98" x="569" y="947.3477">同步、重量级锁</text><path d="M509,1619.916 L519,1619.916 C534,1619.916 534,942.0566 549,942.0566 L559,942.0566 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="559" y="980.3008"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="569" y="1003.8359">原理</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="858" x="657" y="980.3008"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="838" x="667" y="1003.8359">synchronized 可以保证方法或者代码块在运行市，同一时刻只有一个方法可以进入临界区，同时，它还可以保证共享变量的内存可见性</text><path d="M607,998.5449 L617,998.5449 C632,998.5449 632,998.5449 647,998.5449 L657,998.5449 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M509,1619.916 L519,1619.916 C534,1619.916 534,998.5449 549,998.5449 L559,998.5449 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="559" y="1093.2773"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="569" y="1116.8125">锁对象</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="230" x="671" y="1036.7891"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="210" x="681" y="1060.3242">普通同步方法，锁是当前实例对象</text><path d="M621,1111.5215 L631,1111.5215 C646,1111.5215 646,1055.0332 661,1055.0332 L671,1055.0332 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="271" x="671" y="1093.2773"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="251" x="681" y="1116.8125">静态同步方法，锁是当前类的 class 对象</text><path d="M621,1111.5215 L631,1111.5215 C646,1111.5215 646,1111.5215 661,1111.5215 L671,1111.5215 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="216" x="671" y="1149.7656"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="196" x="681" y="1173.3008">同步方法块，锁是括号里的对象</text><path d="M621,1111.5215 L631,1111.5215 C646,1111.5215 646,1168.0098 661,1168.0098 L671,1168.0098 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M509,1619.916 L519,1619.916 C534,1619.916 534,1111.5215 549,1111.5215 L559,1111.5215 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="559" y="1319.2305"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="569" y="1342.7656">实现机制</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="93" x="685" y="1290.9863"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="73" x="695" y="1314.5215">Java 对象头</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="315" x="828" y="1206.2539"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="295" x="838" y="1229.7891">synchronized 的锁就是保存在Java 对象头中的</text><path d="M778,1309.2305 L788,1309.2305 C803,1309.2305 803,1224.498 818,1224.498 L828,1224.498 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="118" x="828" y="1319.2305"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="98" x="838" y="1342.7656">包括两部分数据</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="160" x="996" y="1290.9863"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="140" x="1006" y="1314.5215">Mark Word(标记字段)</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="798" x="1206" y="1262.7422"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="778" x="1216" y="1286.2773">Mark Word 被设计成一个非固定的数据结果以便在极小的空间内存储尽量多的数据，它会根据对象的状态复用自己的存储空间</text><path d="M1156,1309.2305 L1166,1309.2305 C1181,1309.2305 1181,1280.9863 1196,1280.9863 L1206,1280.9863 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="1206" y="1319.2305"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="1216" y="1342.7656">包括</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="603" x="1304" y="1319.2305"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="583" x="1314" y="1342.7656">哈希码（HashCode）、GC 分代年龄、锁状态标记、线程持有锁、偏向锁线程Id、偏向时间戳</text><path d="M1254,1337.4746 L1264,1337.4746 C1279,1337.4746 1279,1337.4746 1294,1337.4746 L1304,1337.4746 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M1156,1309.2305 L1166,1309.2305 C1181,1309.2305 1181,1337.4746 1196,1337.4746 L1206,1337.4746 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M946,1337.4746 L956,1337.4746 C971,1337.4746 971,1309.2305 986,1309.2305 L996,1309.2305 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="178" x="996" y="1375.7188"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="158" x="1006" y="1399.2539">Klass Pointer (类型指针)</text><path d="M946,1337.4746 L956,1337.4746 C971,1337.4746 971,1393.9629 986,1393.9629 L996,1393.9629 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M778,1309.2305 L788,1309.2305 C803,1309.2305 803,1337.4746 818,1337.4746 L828,1337.4746 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M635,1337.4746 L645,1337.4746 C660,1337.4746 660,1309.2305 675,1309.2305 L685,1309.2305 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="75" x="685" y="1432.207"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="55" x="695" y="1455.7422">monitor</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="63" x="810" y="1432.207"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="43" x="820" y="1455.7422">owner</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="838" x="923" y="1432.207"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="818" x="933" y="1455.7422">初始时为 Null 表示当前没有任何线程拥有该 monitor record，当线程成功拥有该锁后保存线程唯一表示，当锁释放时又设置为 Null</text><path d="M873,1450.4512 L883,1450.4512 C898,1450.4512 898,1450.4512 913,1450.4512 L923,1450.4512 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M760,1450.4512 L770,1450.4512 C785,1450.4512 785,1450.4512 800,1450.4512 L810,1450.4512 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M635,1337.4746 L645,1337.4746 C660,1337.4746 660,1450.4512 675,1450.4512 L685,1450.4512 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M509,1619.916 L519,1619.916 C534,1619.916 534,1337.4746 549,1337.4746 L559,1337.4746 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="559" y="1884.1133"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="569" y="1907.6484">锁优化</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="671" y="1573.4277"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="681" y="1596.9629">自旋锁</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="580" x="783" y="1488.6953"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="560" x="793" y="1512.2305">该线程的等待一段时间，不会被立刻挂起，看持有锁的线程是否会很快释放锁（循环方式）</text><path d="M733,1591.6719 L743,1591.6719 C758,1591.6719 758,1506.9395 773,1506.9395 L783,1506.9395 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="279" x="783" y="1545.1836"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="259" x="793" y="1568.7188">自旋次数较难控制（-XX:preBlockSpin）</text><path d="M733,1591.6719 L743,1591.6719 C758,1591.6719 758,1563.4277 773,1563.4277 L783,1563.4277 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="696" x="783" y="1601.6719"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="676" x="793" y="1625.207">存在理论：线程的频繁挂起、唤醒负担较重， 可以认为每个线程占用锁的时间很短，线程挂起再唤醒得不偿失</text><path d="M733,1591.6719 L743,1591.6719 C758,1591.6719 758,1619.916 773,1619.916 L783,1619.916 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="783" y="1658.1602"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="793" y="1681.6953">缺点</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="132" x="881" y="1658.1602"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="112" x="891" y="1681.6953">自选次数无法确定</text><path d="M831,1676.4043 L841,1676.4043 C856,1676.4043 856,1676.4043 871,1676.4043 L881,1676.4043 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M733,1591.6719 L743,1591.6719 C758,1591.6719 758,1676.4043 773,1676.4043 L783,1676.4043 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M621,1902.3574 L631,1902.3574 C646,1902.3574 646,1591.6719 661,1591.6719 L671,1591.6719 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="104" x="671" y="1742.8926"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="84" x="681" y="1766.4277">适应性自旋锁</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="580" x="825" y="1714.6484"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="560" x="835" y="1738.1836">自旋次数不再是确定的，它是由前一次在同一个锁上的自选时间及锁的拥有者的状态来决定</text><path d="M775,1761.1367 L785,1761.1367 C800,1761.1367 800,1732.8926 815,1732.8926 L825,1732.8926 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="496" x="825" y="1771.1367"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="476" x="835" y="1794.6719">自选成功，则可以增加自旋次数，如果获取锁经常失败，那么自旋次数会减少</text><path d="M775,1761.1367 L785,1761.1367 C800,1761.1367 800,1789.3809 815,1789.3809 L825,1789.3809 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M621,1902.3574 L631,1902.3574 C646,1902.3574 646,1761.1367 661,1761.1367 L671,1761.1367 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="671" y="1855.8691"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="681" y="1879.4043">锁消除</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="297" x="783" y="1827.625"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="277" x="793" y="1851.1602">若不存在数据竞争的情况，JVM会消除锁机制</text><path d="M733,1874.1133 L743,1874.1133 C758,1874.1133 758,1845.8691 773,1845.8691 L783,1845.8691 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="783" y="1884.1133"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="793" y="1907.6484">判断依据</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="909" y="1884.1133"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="919" y="1907.6484">变量逃逸</text><path d="M859,1902.3574 L869,1902.3574 C884,1902.3574 884,1902.3574 899,1902.3574 L909,1902.3574 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M733,1874.1133 L743,1874.1133 C758,1874.1133 758,1902.3574 773,1902.3574 L783,1902.3574 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M621,1902.3574 L631,1902.3574 C646,1902.3574 646,1874.1133 661,1874.1133 L671,1874.1133 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="671" y="1940.6016"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="681" y="1964.1367">锁粗化</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="608" x="783" y="1940.6016"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="588" x="793" y="1964.1367">将多个连续的加锁、解锁操作连接在一起，扩展成一个范围更大的锁。例如 for 循环内部获取锁</text><path d="M733,1958.8457 L743,1958.8457 C758,1958.8457 758,1958.8457 773,1958.8457 L783,1958.8457 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M621,1902.3574 L631,1902.3574 C646,1902.3574 646,1958.8457 661,1958.8457 L671,1958.8457 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="671" y="2081.8223"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="681" y="2105.3574">轻量级锁</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="524" x="797" y="1997.0898"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="504" x="807" y="2020.625">在没有多线程的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗</text><path d="M747,2100.0664 L757,2100.0664 C772,2100.0664 772,2015.334 787,2015.334 L797,2015.334 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="196" x="797" y="2053.5781"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="176" x="807" y="2077.1133">通过 CAS 来获取锁和释放锁</text><path d="M747,2100.0664 L757,2100.0664 C772,2100.0664 772,2071.8223 787,2071.8223 L797,2071.8223 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="797" y="2110.0664"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="807" y="2133.6016">性能依据</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="384" x="923" y="2110.0664"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="364" x="933" y="2133.6016">对于绝大部分的锁，在整个生命周期内都是不会存在竞争的</text><path d="M873,2128.3105 L883,2128.3105 C898,2128.3105 898,2128.3105 913,2128.3105 L923,2128.3105 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M747,2100.0664 L757,2100.0664 C772,2100.0664 772,2128.3105 787,2128.3105 L797,2128.3105 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="797" y="2166.5547"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="807" y="2190.0898">缺点</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="314" x="895" y="2166.5547"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="294" x="905" y="2190.0898">在多线程情况下，其运行效率比重量级锁还会慢</text><path d="M845,2184.7988 L855,2184.7988 C870,2184.7988 870,2184.7988 885,2184.7988 L895,2184.7988 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M747,2100.0664 L757,2100.0664 C772,2100.0664 772,2184.7988 787,2184.7988 L797,2184.7988 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M621,1902.3574 L631,1902.3574 C646,1902.3574 646,2100.0664 661,2100.0664 L671,2100.0664 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="90" x="671" y="2251.2871"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="70" x="681" y="2274.8223">偏向锁线程</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="440" x="811" y="2223.043"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="420" x="821" y="2246.5781">为了在无多线程竞争的情况下尽量较少不必要的轻量级锁的执行路径</text><path d="M761,2269.5313 L771,2269.5313 C786,2269.5313 786,2241.2871 801,2241.2871 L811,2241.2871 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="490" x="811" y="2279.5313"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="470" x="821" y="2303.0664">主要尽可能避免不必需要的 CAS 操作，如果竞争锁失败，则升级为轻量级锁</text><path d="M761,2269.5313 L771,2269.5313 C786,2269.5313 786,2297.7754 801,2297.7754 L811,2297.7754 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M621,1902.3574 L631,1902.3574 C646,1902.3574 646,2269.5313 661,2269.5313 L671,2269.5313 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M509,1619.916 L519,1619.916 C534,1619.916 534,1902.3574 549,1902.3574 L559,1902.3574 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M347,1591.6719 L357,1591.6719 C372,1591.6719 372,1619.916 387,1619.916 L397,1619.916 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="69" x="397" y="2590.2168"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="49" x="407" y="2613.752">volatile</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="516" y="2364.2637"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="526" y="2387.7988">特性</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="452" x="614" y="2336.0195"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="432" x="624" y="2359.5547">volatile 可见性：对于 volatile 的读，总可以看到对这个变量最终的写</text><path d="M564,2382.5078 L574,2382.5078 C589,2382.5078 589,2354.2637 604,2354.2637 L614,2354.2637 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="684" x="614" y="2392.5078"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="664" x="624" y="2416.043">volatile 原子性：volatile 对单个读/写具有原子性（32位Long、Double），但是符合操作除外，例如 i++</text><path d="M564,2382.5078 L574,2382.5078 C589,2382.5078 589,2410.752 604,2410.752 L614,2410.752 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M466,2608.4609 L476,2608.4609 C491,2608.4609 491,2382.5078 506,2382.5078 L516,2382.5078 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="516" y="2448.9961"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="526" y="2472.5313">实现机制</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="642" y="2448.9961"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="652" y="2472.5313">内存屏障</text><path d="M592,2467.2402 L602,2467.2402 C617,2467.2402 617,2467.2402 632,2467.2402 L642,2467.2402 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M466,2608.4609 L476,2608.4609 C491,2608.4609 491,2467.2402 506,2467.2402 L516,2467.2402 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="516" y="2533.7285"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="526" y="2557.2637">内存语义</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="613" x="642" y="2505.4844"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="593" x="652" y="2529.0195">当写一个 volatile 变量时，JMM 会把该线程对应的本地内存中的共享变量值立即刷新到主内存中</text><path d="M592,2551.9727 L602,2551.9727 C617,2551.9727 617,2523.7285 632,2523.7285 L642,2523.7285 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="655" x="642" y="2561.9727"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="635" x="652" y="2585.5078">当读一个 volatile 变量时，JMM 会把该线程对应的本地内存设置为无效，直接从主内存中读取共享变量</text><path d="M592,2551.9727 L602,2551.9727 C617,2551.9727 617,2580.2168 632,2580.2168 L642,2580.2168 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M466,2608.4609 L476,2608.4609 C491,2608.4609 491,2551.9727 506,2551.9727 L516,2551.9727 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="104" x="516" y="2674.9492"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="84" x="526" y="2698.4844">操作系统语义</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="258" x="670" y="2618.4609"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="238" x="680" y="2641.9961">主存、高速缓存（线程私有）缓存一致</text><path d="M620,2693.1934 L630,2693.1934 C645,2693.1934 645,2636.7051 660,2636.7051 L670,2636.7051 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="670" y="2703.1934"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="680" y="2726.7285">解决方案</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="199" x="796" y="2674.9492"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="179" x="806" y="2698.4844">通过在总线加 Lock 锁的方式</text><path d="M746,2721.4375 L756,2721.4375 C771,2721.4375 771,2693.1934 786,2693.1934 L796,2693.1934 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="206" x="796" y="2731.4375"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="186" x="806" y="2754.9727">通过缓存一致性协议（MESI）</text><path d="M746,2721.4375 L756,2721.4375 C771,2721.4375 771,2749.6816 786,2749.6816 L796,2749.6816 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M620,2693.1934 L630,2693.1934 C645,2693.1934 645,2721.4375 660,2721.4375 L670,2721.4375 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M466,2608.4609 L476,2608.4609 C491,2608.4609 491,2693.1934 506,2693.1934 L516,2693.1934 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="516" y="2816.1699"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="526" y="2839.7051">内存模型</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="642" y="2787.9258"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="652" y="2811.4609">重排序</text><path d="M592,2834.4141 L602,2834.4141 C617,2834.4141 617,2806.1699 632,2806.1699 L642,2806.1699 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="132" x="642" y="2844.4141"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="112" x="652" y="2867.9492">happens-before</text><path d="M592,2834.4141 L602,2834.4141 C617,2834.4141 617,2862.6582 632,2862.6582 L642,2862.6582 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M466,2608.4609 L476,2608.4609 C491,2608.4609 491,2834.4141 506,2834.4141 L516,2834.4141 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M347,1591.6719 L357,1591.6719 C372,1591.6719 372,2608.4609 387,2608.4609 L397,2608.4609 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="50" x="397" y="3013.8789"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="30" x="407" y="3037.4141">dcl()</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="497" y="2900.9023"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="507" y="2924.4375">单例模式</text><path d="M447,3032.123 L457,3032.123 C472,3032.123 472,2919.1465 487,2919.1465 L497,2919.1465 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="47" x="497" y="2985.6348"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="27" x="507" y="3009.1699">DCL</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="594" y="2957.3906"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="604" y="2980.9258">重排序</text><path d="M544,3003.8789 L554,3003.8789 C569,3003.8789 569,2975.6348 584,2975.6348 L594,2975.6348 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="132" x="594" y="3013.8789"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="112" x="604" y="3037.4141">happens-before</text><path d="M544,3003.8789 L554,3003.8789 C569,3003.8789 569,3032.123 584,3032.123 L594,3032.123 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M447,3032.123 L457,3032.123 C472,3032.123 472,3003.8789 487,3003.8789 L497,3003.8789 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="497" y="3098.6113"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="507" y="3122.1465">解决方案</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="101" x="623" y="3070.3672"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="81" x="633" y="3093.9023">volatile 方案</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="90" x="774" y="3070.3672"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="70" x="784" y="3093.9023">禁止重排序</text><path d="M724,3088.6113 L734,3088.6113 C749,3088.6113 749,3088.6113 764,3088.6113 L774,3088.6113 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M573,3116.8555 L583,3116.8555 C598,3116.8555 598,3088.6113 613,3088.6113 L623,3088.6113 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="174" x="623" y="3126.8555"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="154" x="633" y="3150.3906">基于类初始化的解决方案</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="975" x="847" y="3126.8555"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="955" x="857" y="3150.3906">利用 ClassLoader 的机制来保证初始化 instance 时就只有一个线程，JVM 在类的初始化阶段会获得一个锁，这个锁可以同步多个线程对同一个类的初始话</text><path d="M797,3145.0996 L807,3145.0996 C822,3145.0996 822,3145.0996 837,3145.0996 L847,3145.0996 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M573,3116.8555 L583,3116.8555 C598,3116.8555 598,3145.0996 613,3145.0996 L623,3145.0996 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M447,3032.123 L457,3032.123 C472,3032.123 472,3116.8555 487,3116.8555 L497,3116.8555 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M347,1591.6719 L357,1591.6719 C372,1591.6719 372,3032.123 387,3032.123 L397,3032.123 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M117,7473.5518 L127,7473.5518 C142,7473.5518 142,1591.6719 157,1591.6719 L167,1591.6719 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="180" x="167" y="3776.4707"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="160" x="177" y="3800.0059">2. Java 内存模型（JMM）</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="49" x="397" y="3578.7617"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="29" x="407" y="3602.2969">AQS</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="435" x="496" y="3183.3438"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="415" x="506" y="3206.8789">AbstractQueuedSynchronizer，同步器，实现 JUC 核心基础组件</text><path d="M446,3597.0059 L456,3597.0059 C471,3597.0059 471,3201.5879 486,3201.5879 L496,3201.5879 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="527" x="496" y="3239.832"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="507" x="506" y="3263.3672">解决了子类实现同步器时涉及的大量细节问题，例如获取同步状态、FIFO同步队列</text><path d="M446,3597.0059 L456,3597.0059 C471,3597.0059 471,3258.0762 486,3258.0762 L496,3258.0762 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="599" x="496" y="3296.3203"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="579" x="506" y="3319.8555">采用模板模式，AQS 实现了大量通用方法，子类通过继承方式实现其抽象方法来管理同步状态</text><path d="M446,3597.0059 L456,3597.0059 C471,3597.0059 471,3314.5645 486,3314.5645 L496,3314.5645 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="107" x="496" y="3381.0527"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="87" x="506" y="3404.5879">CLH 同步队列</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="368" x="653" y="3352.8086"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="348" x="663" y="3376.3438">FIFO 双向队列，AQS 依赖它来解决同步状态的管理问题</text><path d="M603,3399.2969 L613,3399.2969 C628,3399.2969 628,3371.0527 643,3371.0527 L653,3371.0527 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="335" x="653" y="3409.2969"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="315" x="663" y="3432.832">首节点唤醒，等待队列加入到 CLH 同步队列的尾部</text><path d="M603,3399.2969 L613,3399.2969 C628,3399.2969 628,3427.541 643,3427.541 L653,3427.541 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M446,3597.0059 L456,3597.0059 C471,3597.0059 471,3399.2969 486,3399.2969 L496,3399.2969 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="146" x="496" y="3607.0059"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="126" x="506" y="3630.541">同步状态获取与释放</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="692" y="3550.5176"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="702" y="3574.0527">独占式</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="804" y="3522.2734"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="814" y="3545.8086">获取锁</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="169" x="916" y="3465.7852"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="149" x="926" y="3489.3203">获取同步状态：acquire</text><path d="M866,3540.5176 L876,3540.5176 C891,3540.5176 891,3484.0293 906,3484.0293 L916,3484.0293 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="226" x="916" y="3522.2734"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="206" x="926" y="3545.8086">响应中断：acquireInterruptibly</text><path d="M866,3540.5176 L876,3540.5176 C891,3540.5176 891,3540.5176 906,3540.5176 L916,3540.5176 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="204" x="916" y="3578.7617"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="184" x="926" y="3602.2969">超时获取：tryAcquireNanos</text><path d="M866,3540.5176 L876,3540.5176 C891,3540.5176 891,3597.0059 906,3597.0059 L916,3597.0059 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M754,3568.7617 L764,3568.7617 C779,3568.7617 779,3540.5176 794,3540.5176 L804,3540.5176 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="804" y="3635.25"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="814" y="3658.7852">释放锁</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="69" x="916" y="3635.25"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="49" x="926" y="3658.7852">release</text><path d="M866,3653.4941 L876,3653.4941 C891,3653.4941 891,3653.4941 906,3653.4941 L916,3653.4941 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M754,3568.7617 L764,3568.7617 C779,3568.7617 779,3653.4941 794,3653.4941 L804,3653.4941 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M642,3625.25 L652,3625.25 C667,3625.25 667,3568.7617 682,3568.7617 L692,3568.7617 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="692" y="3719.9824"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="702" y="3743.5176">共享式</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="804" y="3691.7383"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="814" y="3715.2734">获取锁</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="119" x="916" y="3691.7383"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="99" x="926" y="3715.2734">acquireShared</text><path d="M866,3709.9824 L876,3709.9824 C891,3709.9824 891,3709.9824 906,3709.9824 L916,3709.9824 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M754,3738.2266 L764,3738.2266 C779,3738.2266 779,3709.9824 794,3709.9824 L804,3709.9824 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="804" y="3748.2266"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="814" y="3771.7617">释放锁</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="117" x="916" y="3748.2266"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="97" x="926" y="3771.7617">releaseShared</text><path d="M866,3766.4707 L876,3766.4707 C891,3766.4707 891,3766.4707 906,3766.4707 L916,3766.4707 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M754,3738.2266 L764,3738.2266 C779,3738.2266 779,3766.4707 794,3766.4707 L804,3766.4707 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M642,3625.25 L652,3625.25 C667,3625.25 667,3738.2266 682,3738.2266 L692,3738.2266 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M446,3597.0059 L456,3597.0059 C471,3597.0059 471,3625.25 486,3625.25 L496,3625.25 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="118" x="496" y="3889.4473"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="98" x="506" y="3912.9824">线程阻塞与唤醒</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="539" x="664" y="3804.7148"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="519" x="674" y="3828.25">当有线程获取锁了，其他再次获取时需要阻塞，当线程释放锁后，AQS负责唤醒线程</text><path d="M614,3907.6914 L624,3907.6914 C639,3907.6914 639,3822.959 654,3822.959 L664,3822.959 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="106" x="664" y="3917.6914"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="86" x="674" y="3941.2266">LockSupport</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="314" x="820" y="3861.2031"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="294" x="830" y="3884.7383">是用来创建锁和其他同步类的基本线程阻塞原语</text><path d="M770,3935.9355 L780,3935.9355 C795,3935.9355 795,3879.4473 810,3879.4473 L820,3879.4473 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="1200" x="820" y="3917.6914"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="1180" x="830" y="3941.2266">每个使用 LockSupport 的线程都会与一个许可关联，如果该许可可用，并且可在进程中使用，则调用 park() 将会立即放回，否则可能阻塞，如果许可尚不可用，则可以调用 unpark 使其可用</text><path d="M770,3935.9355 L780,3935.9355 C795,3935.9355 795,3935.9355 810,3935.9355 L820,3935.9355 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="133" x="820" y="3974.1797"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="113" x="830" y="3997.7148">park()、unPark()</text><path d="M770,3935.9355 L780,3935.9355 C795,3935.9355 795,3992.4238 810,3992.4238 L820,3992.4238 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M614,3907.6914 L624,3907.6914 C639,3907.6914 639,3935.9355 654,3935.9355 L664,3935.9355 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M446,3597.0059 L456,3597.0059 C471,3597.0059 471,3907.6914 486,3907.6914 L496,3907.6914 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M347,3794.7148 L357,3794.7148 C372,3794.7148 372,3597.0059 387,3597.0059 L397,3597.0059 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="397" y="4200.1328"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="407" y="4223.668">CAS</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="383" x="495" y="4030.668"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="363" x="505" y="4054.2031">Compare And Swap，整个 JUC 体系最核心、最基础理论</text><path d="M445,4218.377 L455,4218.377 C470,4218.377 470,4048.9121 485,4048.9121 L495,4048.9121 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="855" x="495" y="4087.1563"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="835" x="505" y="4110.6914">内存值 V 、旧的预期值A、要更新的值 B 、当且仅当内存值 V 的值等于旧的预期值 A 时才会将内存之 V 的值修改为 B，否则什么都不干</text><path d="M445,4218.377 L455,4218.377 C470,4218.377 470,4105.4004 485,4105.4004 L495,4105.4004 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="163" x="495" y="4143.6445"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="143" x="505" y="4167.1797">native 中存在四个参数</text><path d="M445,4218.377 L455,4218.377 C470,4218.377 470,4161.8887 485,4161.8887 L495,4161.8887 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="495" y="4284.8652"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="505" y="4308.4004">缺陷</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="90" x="593" y="4200.1328"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="70" x="603" y="4223.668">循环时间长</text><path d="M543,4303.1094 L553,4303.1094 C568,4303.1094 568,4218.377 583,4218.377 L593,4218.377 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="216" x="593" y="4256.6211"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="196" x="603" y="4280.1563">只能保证一个共享变量原子操作</text><path d="M543,4303.1094 L553,4303.1094 C568,4303.1094 568,4274.8652 583,4274.8652 L593,4274.8652 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="80" x="593" y="4341.3535"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="60" x="603" y="4364.8887">ABA 问题</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="723" y="4341.3535"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="733" y="4364.8887">解决方案</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="849" y="4313.1094"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="859" y="4336.6445">版本号</text><path d="M799,4359.5977 L809,4359.5977 C824,4359.5977 824,4331.3535 839,4331.3535 L849,4331.3535 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="196" x="849" y="4369.5977"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="176" x="859" y="4393.1328">AtomicStampedReference</text><path d="M799,4359.5977 L809,4359.5977 C824,4359.5977 824,4387.8418 839,4387.8418 L849,4387.8418 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M673,4359.5977 L683,4359.5977 C698,4359.5977 698,4359.5977 713,4359.5977 L723,4359.5977 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M543,4303.1094 L553,4303.1094 C568,4303.1094 568,4359.5977 583,4359.5977 L593,4359.5977 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M445,4218.377 L455,4218.377 C470,4218.377 470,4303.1094 485,4303.1094 L495,4303.1094 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M347,3794.7148 L357,3794.7148 C372,3794.7148 372,4218.377 387,4218.377 L397,4218.377 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M117,7473.5518 L127,7473.5518 C142,7473.5518 142,3794.7148 157,3794.7148 L167,3794.7148 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="51" x="167" y="4652.0391"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="31" x="177" y="4675.5742">3. 锁</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="118" x="268" y="4510.8184"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="98" x="278" y="4534.3535">ReentrantLock</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="272" x="436" y="4426.0859"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="252" x="446" y="4449.6211">可重入锁，是一种递归无阻塞的同步机制</text><path d="M386,4529.0625 L396,4529.0625 C411,4529.0625 411,4444.3301 426,4444.3301 L436,4444.3301 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="442" x="436" y="4482.5742"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="422" x="446" y="4506.1094">比 synchronized 更强大、灵活的锁机制，可以减少死锁发生的概率</text><path d="M386,4529.0625 L396,4529.0625 C411,4529.0625 411,4500.8184 426,4500.8184 L436,4500.8184 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="160" x="436" y="4539.0625"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="140" x="446" y="4562.5977">分为公平锁、非公平锁</text><path d="M386,4529.0625 L396,4529.0625 C411,4529.0625 411,4557.3066 426,4557.3066 L436,4557.3066 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="324" x="436" y="4595.5508"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="304" x="446" y="4619.0859">底层采用 CAS 实现，通过内部的 Sync 继承 AQS</text><path d="M386,4529.0625 L396,4529.0625 C411,4529.0625 411,4613.7949 426,4613.7949 L436,4613.7949 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M218,4670.2832 L228,4670.2832 C243,4670.2832 243,4529.0625 258,4529.0625 L268,4529.0625 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="187" x="268" y="4708.5273"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="167" x="278" y="4732.0625">ReentrantReadWriteLock</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="118" x="505" y="4680.2832"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="98" x="515" y="4703.8184">读写锁，两把锁</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="104" x="673" y="4652.0391"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="84" x="683" y="4675.5742">共享锁：读锁</text><path d="M623,4698.5273 L633,4698.5273 C648,4698.5273 648,4670.2832 663,4670.2832 L673,4670.2832 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="104" x="673" y="4708.5273"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="84" x="683" y="4732.0625">排他锁：写锁</text><path d="M623,4698.5273 L633,4698.5273 C648,4698.5273 648,4726.7715 663,4726.7715 L673,4726.7715 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M455,4726.7715 L465,4726.7715 C480,4726.7715 480,4698.5273 495,4698.5273 L505,4698.5273 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="496" x="505" y="4765.0156"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="476" x="515" y="4788.5508">锁降级：遵循获取写锁、获取读锁在释放写锁的次序，写锁能够降级成为读锁</text><path d="M455,4726.7715 L465,4726.7715 C480,4726.7715 480,4783.2598 495,4783.2598 L505,4783.2598 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M218,4670.2832 L228,4670.2832 C243,4670.2832 243,4726.7715 258,4726.7715 L268,4726.7715 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="88" x="268" y="4849.748"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="68" x="278" y="4873.2832">Condition</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="449" x="406" y="4821.5039"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="429" x="416" y="4845.0391">Lock 提供条件 Condition，对线程的等待、唤醒操作更加详细和灵活</text><path d="M356,4867.9922 L366,4867.9922 C381,4867.9922 381,4839.748 396,4839.748 L406,4839.748 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="858" x="406" y="4877.9922"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="838" x="416" y="4901.5273">内部维护一个 Condition 队列，当前线程调用 await() 方法，将会以当前线程构成一个节点（Node），并将接待你加入到该队列的尾部</text><path d="M356,4867.9922 L366,4867.9922 C381,4867.9922 381,4896.2363 396,4896.2363 L406,4896.2363 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M218,4670.2832 L228,4670.2832 C243,4670.2832 243,4867.9922 258,4867.9922 L268,4867.9922 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M117,7473.5518 L127,7473.5518 C142,7473.5518 142,4670.2832 157,4670.2832 L167,4670.2832 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="107" x="167" y="5376.9971"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="87" x="177" y="5400.5322">4. 并发工具类</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="105" x="324" y="5019.2129"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="85" x="334" y="5042.748">CyclicBarrier</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="521" x="479" y="4934.4805"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="501" x="489" y="4958.0156">它允许一组线程互相等待，直到到达某个公共屏障点（common barrier point）</text><path d="M429,5037.457 L439,5037.457 C454,5037.457 454,4952.7246 469,4952.7246 L479,4952.7246 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="790" x="479" y="4990.9688"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="770" x="489" y="5014.5039">通俗讲：让一组线程达到一个屏障时被阻塞，知道最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会干活</text><path d="M429,5037.457 L439,5037.457 C454,5037.457 454,5009.2129 469,5009.2129 L479,5009.2129 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="297" x="479" y="5047.457"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="277" x="489" y="5070.9922">底层采用 ReentrantLock + Condition 实现</text><path d="M429,5037.457 L439,5037.457 C454,5037.457 454,5065.7012 469,5065.7012 L479,5065.7012 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="479" y="5103.9453"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="489" y="5127.4805">应用场景</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="496" x="605" y="5103.9453"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="476" x="615" y="5127.4805">多线程合并的操作结果，用于多线程计算数据，最后合并计算结果的应用场景</text><path d="M555,5122.1895 L565,5122.1895 C580,5122.1895 580,5122.1895 595,5122.1895 L605,5122.1895 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M429,5037.457 L439,5037.457 C454,5037.457 454,5122.1895 469,5122.1895 L479,5122.1895 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M274,5395.2412 L284,5395.2412 C299,5395.2412 299,5037.457 314,5037.457 L324,5037.457 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="137" x="324" y="5267.5322"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="117" x="334" y="5291.0674">CountDownLatch</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="524" x="511" y="5160.4336"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="504" x="521" y="5183.9688">在完成一组正在其他线程中执行的操作值钱，它允许调用一个或多个线程一直等待</text><path d="M461,5285.7764 L471,5285.7764 C486,5285.7764 486,5178.6777 501,5178.6777 L511,5178.6777 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="52.9766" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="1003" x="511" y="5216.9219"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="831" x="597" y="5240.457">用给定的计数器 初始化 CountDownLatch，由于调用 countDown() 放啊发，所以在技术其到达零之前，await() 方法会一直受阻塞。</text><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="979" x="525" y="5256.9453">之后，会释放所有等待的线程，await 的所有后续调用都将立即返回。这种现象只出现一次 -- 计数器无法被重置。如果需要被重新技术，请考虑 CyclicBarrier</text><path d="M461,5285.7764 L471,5285.7764 C486,5285.7764 486,5243.4102 501,5243.4102 L511,5243.4102 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="169" x="511" y="5318.1426"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="149" x="521" y="5341.6777">与 CyclicBarrier 的区别</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="763" x="730" y="5289.8984"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="743" x="740" y="5313.4336">CountDownLatch 的作用是允许 1 或者 N 个线程等待其他线程完成执行；而 CyclicBarrier 则是允许 N 个线程相互等待</text><path d="M680,5336.3867 L690,5336.3867 C705,5336.3867 705,5308.1426 720,5308.1426 L730,5308.1426 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="743" x="730" y="5346.3867"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="723" x="740" y="5369.9219">CountDownLatch 的计数器无法被重置；CyclicBarrier 的计数器可以被重置后使用，因此它被称为是循环的 barrier</text><path d="M680,5336.3867 L690,5336.3867 C705,5336.3867 705,5364.6309 720,5364.6309 L730,5364.6309 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M461,5285.7764 L471,5285.7764 C486,5285.7764 486,5336.3867 501,5336.3867 L511,5336.3867 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="160" x="511" y="5374.6309"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="140" x="521" y="5398.166">内部采用共享锁来实现</text><path d="M461,5285.7764 L471,5285.7764 C486,5285.7764 486,5392.875 501,5392.875 L511,5392.875 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M274,5395.2412 L284,5395.2412 C299,5395.2412 299,5285.7764 314,5285.7764 L324,5285.7764 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="98" x="324" y="5560.584"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="78" x="334" y="5584.1191">Semaphore</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="472" y="5431.1191"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="482" y="5454.6543">信号量</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="244" x="584" y="5431.1191"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="224" x="594" y="5454.6543">一个控制访问多个共享资源的计数器</text><path d="M534,5449.3633 L544,5449.3633 C559,5449.3633 559,5449.3633 574,5449.3633 L584,5449.3633 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M422,5578.8281 L432,5578.8281 C447,5578.8281 447,5449.3633 462,5449.3633 L472,5449.3633 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="52.9766" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="1174" x="472" y="5487.6074"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="1154" x="482" y="5511.1426">从概念上来讲，信号量维护了一个许可集。如果有必要，在许可可用前会阻塞每一个 acquire()，然后再获得许可。每一个 release() 添加一个许可，从而可能释放一个正在阻塞的获取者。</text><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="578" x="770" y="5527.6309">但是，不使用实际的许可对象，Samphore 只对可用许可的号码进行技术，并采取相应的行动</text><path d="M422,5578.8281 L432,5578.8281 C447,5578.8281 447,5514.0957 462,5514.0957 L472,5514.0957 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="52.9766" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="1137" x="472" y="5560.584"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="877" x="602" y="5584.1191">信号量 Samphore 是一个非负整数（ &gt;=1 ）。当一个线程想要访问某个共享资源是，它必须先获取 Semaphore ，当 Semaphore &gt; 0 时，</text><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="1113" x="486" y="5600.6074">获取该资源并使 Semaphore -1。如果 Semaphore = 0，则表示全部的共享资源已经被其他线程全部占用，线程必须等待其他线程释放资源。当线程释放资源时，Semaphore +1</text><path d="M422,5578.8281 L432,5578.8281 C447,5578.8281 447,5587.0723 462,5587.0723 L472,5587.0723 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="472" y="5633.5605"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="482" y="5657.0957">应用场景</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="384" x="598" y="5633.5605"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="364" x="608" y="5657.0957">通常用于限制可以访问某些资源（物理或逻辑的）线程数目</text><path d="M548,5651.8047 L558,5651.8047 C573,5651.8047 573,5651.8047 588,5651.8047 L598,5651.8047 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M422,5578.8281 L432,5578.8281 C447,5578.8281 447,5651.8047 462,5651.8047 L472,5651.8047 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="146" x="472" y="5690.0488"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="126" x="482" y="5713.584">内部采用共享锁实现</text><path d="M422,5578.8281 L432,5578.8281 C447,5578.8281 447,5708.293 462,5708.293 L472,5708.293 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M274,5395.2412 L284,5395.2412 C299,5395.2412 299,5578.8281 314,5578.8281 L324,5578.8281 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="93" x="324" y="5783.0254"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="73" x="334" y="5806.5605">Exchanger</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="328" x="467" y="5746.5371"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="308" x="477" y="5770.0723">可以在对中对元素进行配对和交换的线程的同步点</text><path d="M417,5801.2695 L427,5801.2695 C442,5801.2695 442,5764.7813 457,5764.7813 L467,5764.7813 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="52.9766" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="972" x="467" y="5803.0254"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="567" x="669.5" y="5826.5605">允许在并发任务直中交换数据，具体来说，Exchanger 类允许在两个线程之间定义同步点。</text><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="952" x="477" y="5843.0488">当两个线程都到到同步点时，他们交换数据结构，因此第一个线程的数据结构进入到第二个线程的数据结构中，第二个线程的数据结构进入到第一个线程中</text><path d="M417,5801.2695 L427,5801.2695 C442,5801.2695 442,5829.5137 457,5829.5137 L467,5829.5137 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M274,5395.2412 L284,5395.2412 C299,5395.2412 299,5801.2695 314,5801.2695 L324,5801.2695 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M117,7473.5518 L127,7473.5518 C142,7473.5518 142,5395.2412 157,5395.2412 L167,5395.2412 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="65" x="167" y="6477.373"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="45" x="177" y="6500.9082">5. 其他</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="104" x="282" y="6223.1758"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="84" x="292" y="6246.7109">ThreadLocal</text><rect fill="#E3F2FD" height="52.9766" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="888" x="436" y="5876.002"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="434" x="663" y="5899.5371">一种解决多线程环境下成员变量的问题的方案，但是与线程同步无关。</text><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="868" x="446" y="5916.0254">其思路是为每一个线程创建一个单独的变量副本，从而每个线程都可以独立的改变自己所拥有的变量副本，而不会改变其他线程所对应的副本</text><path d="M386,6241.4199 L396,6241.4199 C411,6241.4199 411,5902.4902 426,5902.4902 L436,5902.4902 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="891" x="436" y="5948.9785"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="871" x="446" y="5972.5137">ThreadLocal 不是用于解决共享变量的问题id额，也不是为了协调线程同步而存在，而是为了方便每个线程处理自己的状态而引入的一个机制</text><path d="M386,6241.4199 L396,6241.4199 C411,6241.4199 411,5967.2227 426,5967.2227 L436,5967.2227 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="436" y="6090.1992"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="446" y="6113.7344">四个方法</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="298" x="562" y="6005.4668"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="278" x="572" y="6029.002">get(): 返回此线程局部变量的当前副本中的值</text><path d="M512,6108.4434 L522,6108.4434 C537,6108.4434 537,6023.7109 552,6023.7109 L562,6023.7109 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="374" x="562" y="6061.9551"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="354" x="572" y="6085.4902">initiaValue(): 返回此线程局部变量的当前线程的“初始值”</text><path d="M512,6108.4434 L522,6108.4434 C537,6108.4434 537,6080.1992 552,6080.1992 L562,6080.1992 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="313" x="562" y="6118.4434"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="293" x="572" y="6141.9785">remove() ： 移除此线程局部变量当前线程的值</text><path d="M512,6108.4434 L522,6108.4434 C537,6108.4434 537,6136.6875 552,6136.6875 L562,6136.6875 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="453" x="562" y="6174.9316"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="433" x="572" y="6198.4668">set(T value) ：将此线程局部变量的当前线程副本中的值设置为指定值</text><path d="M512,6108.4434 L522,6108.4434 C537,6108.4434 537,6193.1758 552,6193.1758 L562,6193.1758 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M386,6241.4199 L396,6241.4199 C411,6241.4199 411,6108.4434 426,6108.4434 L436,6108.4434 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="133" x="436" y="6287.9082"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="113" x="446" y="6311.4434">ThreadLocalMap</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="174" x="619" y="6231.4199"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="154" x="629" y="6254.9551">实现线程隔离机制的关键</text><path d="M569,6306.1523 L579,6306.1523 C594,6306.1523 594,6249.6641 609,6249.6641 L619,6249.6641 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="781" x="619" y="6287.9082"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="761" x="629" y="6311.4434">每个 Thread 内部都有一个 Threadlocal.ThreadLocalMap 类型中的成员，该成员用来存储实际的 ThreadLocal 变量副本</text><path d="M569,6306.1523 L579,6306.1523 C594,6306.1523 594,6306.1523 609,6306.1523 L619,6306.1523 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="795" x="619" y="6344.3965"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="775" x="629" y="6367.9316">提供了一种用键值对方式存储每一个线程的变量副本的方法，key 为当前 ThreadLocal 对象，value 则是对应线程的变量副本</text><path d="M569,6306.1523 L579,6306.1523 C594,6306.1523 594,6362.6406 609,6362.6406 L619,6362.6406 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M386,6241.4199 L396,6241.4199 C411,6241.4199 411,6306.1523 426,6306.1523 L436,6306.1523 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="436" y="6429.1289"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="446" y="6452.6641">注意点</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="555" x="548" y="6400.8848"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="535" x="558" y="6424.4199">ThreadLocal 实例本身是不存储值，它只是提供了一个在当前线程中找到副本值的 key</text><path d="M498,6447.373 L508,6447.373 C523,6447.373 523,6419.1289 538,6419.1289 L548,6419.1289 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="500" x="548" y="6457.373"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="480" x="558" y="6480.9082">是 ThreadLocal 包含在 Thread 中，而不是 Thread 包含在 ThreadLocal 中</text><path d="M498,6447.373 L508,6447.373 C523,6447.373 523,6475.6172 538,6475.6172 L548,6475.6172 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M386,6241.4199 L396,6241.4199 C411,6241.4199 411,6447.373 426,6447.373 L436,6447.373 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="104" x="436" y="6542.1055"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="84" x="446" y="6565.6406">内存泄漏问题</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="130" x="590" y="6513.8613"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="110" x="600" y="6537.3965">ThreadlocalMap</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="255" x="770" y="6513.8613"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="235" x="780" y="6537.3965">key 弱引用，value 强引用，无法回收</text><path d="M720,6532.1055 L730,6532.1055 C745,6532.1055 745,6532.1055 760,6532.1055 L770,6532.1055 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M540,6560.3496 L550,6560.3496 C565,6560.3496 565,6532.1055 580,6532.1055 L590,6532.1055 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="141" x="590" y="6570.3496"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="121" x="600" y="6593.8848">显示调用 remove()</text><path d="M540,6560.3496 L550,6560.3496 C565,6560.3496 565,6588.5938 580,6588.5938 L590,6588.5938 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M386,6241.4199 L396,6241.4199 C411,6241.4199 411,6560.3496 426,6560.3496 L436,6560.3496 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M232,6495.6172 L242,6495.6172 C257,6495.6172 257,6241.4199 272,6241.4199 L282,6241.4199 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="84" x="282" y="6852.791"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="64" x="292" y="6876.3262">Fork/Join</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="762" x="416" y="6626.8379"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="742" x="426" y="6650.373">一个用于并行执行任务的框架，是一个把大任务分割成若干个小人物，最终汇总每个小任务结果后得到大人物结果的框架</text><path d="M366,6871.0352 L376,6871.0352 C391,6871.0352 391,6645.082 406,6645.082 L416,6645.082 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="416" y="6711.5703"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="426" y="6735.1055">核心思想</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="60" x="542" y="6683.3262"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="40" x="552" y="6706.8613">“分治”</text><path d="M492,6729.8145 L502,6729.8145 C517,6729.8145 517,6701.5703 532,6701.5703 L542,6701.5703 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="208" x="542" y="6739.8145"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="188" x="552" y="6763.3496">fork 分级任务，join 收集数据</text><path d="M492,6729.8145 L502,6729.8145 C517,6729.8145 517,6758.0586 532,6758.0586 L542,6758.0586 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M366,6871.0352 L376,6871.0352 C391,6871.0352 391,6729.8145 406,6729.8145 L416,6729.8145 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="416" y="6852.791"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="426" y="6876.3262">工作窃取</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="258" x="542" y="6796.3027"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="238" x="552" y="6819.8379">某个线程从其他队列里窃取任务来执行</text><path d="M492,6871.0352 L502,6871.0352 C517,6871.0352 517,6814.5469 532,6814.5469 L542,6814.5469 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="398" x="542" y="6852.791"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="378" x="552" y="6876.3262">执行快的线程帮助执行慢的线程执行任务，提升整体任务效率</text><path d="M492,6871.0352 L502,6871.0352 C517,6871.0352 517,6871.0352 532,6871.0352 L542,6871.0352 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="146" x="542" y="6909.2793"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="126" x="552" y="6932.8145">队列要采用双向队列</text><path d="M492,6871.0352 L502,6871.0352 C517,6871.0352 517,6927.5234 532,6927.5234 L542,6927.5234 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M366,6871.0352 L376,6871.0352 C391,6871.0352 391,6871.0352 406,6871.0352 L416,6871.0352 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="416" y="7022.2559"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="426" y="7045.791">核心类</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="107" x="528" y="6965.7676"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="87" x="538" y="6989.3027">ForkJoinPool</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="132" x="685" y="6965.7676"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="112" x="695" y="6989.3027">执行任务的线程池</text><path d="M635,6984.0117 L645,6984.0117 C660,6984.0117 660,6984.0117 675,6984.0117 L685,6984.0117 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M478,7040.5 L488,7040.5 C503,7040.5 503,6984.0117 518,6984.0117 L528,6984.0117 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="109" x="528" y="7022.2559"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="89" x="538" y="7045.791">ForkJoinTask</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="283" x="687" y="7022.2559"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="263" x="697" y="7045.791">表示任务，用于 ForkJoinPool 的任务抽象</text><path d="M637,7040.5 L647,7040.5 C662,7040.5 662,7040.5 677,7040.5 L687,7040.5 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M478,7040.5 L488,7040.5 C503,7040.5 503,7040.5 518,7040.5 L528,7040.5 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="175" x="528" y="7078.7441"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="155" x="538" y="7102.2793">ForkJoinWorkerThread</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="146" x="753" y="7078.7441"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="126" x="763" y="7102.2793">执行任务的工作线程</text><path d="M703,7096.9883 L713,7096.9883 C728,7096.9883 728,7096.9883 743,7096.9883 L753,7096.9883 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M478,7040.5 L488,7040.5 C503,7040.5 503,7096.9883 518,7096.9883 L528,7096.9883 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M366,6871.0352 L376,6871.0352 C391,6871.0352 391,7040.5 406,7040.5 L416,7040.5 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M232,6495.6172 L242,6495.6172 C257,6495.6172 257,6871.0352 272,6871.0352 L282,6871.0352 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M117,7473.5518 L127,7473.5518 C142,7473.5518 142,6495.6172 157,6495.6172 L167,6495.6172 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="124" x="167" y="8442.707"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="104" x="177" y="8466.2422">6. Java 并发集合</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="161" x="341" y="7954.3125"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="141" x="351" y="7977.8477">ConcurrentHashMap</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="576" x="552" y="7135.2324"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="556" x="562" y="7158.7676">CAS + Synchronized 来保证并发更新的安全，底层采用 数组 + 链表/红黑树 的存储结构</text><path d="M502,7972.5566 L512,7972.5566 C527,7972.5566 527,7153.4766 542,7153.4766 L552,7153.4766 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="90" x="552" y="7417.6738"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="70" x="562" y="7441.209">重要内部类</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="56" x="692" y="7191.7207"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="36" x="702" y="7215.2559">Node</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="129" x="798" y="7191.7207"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="109" x="808" y="7215.2559">key-value键值对</text><path d="M748,7209.9648 L758,7209.9648 C773,7209.9648 773,7209.9648 788,7209.9648 L798,7209.9648 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M642,7435.918 L652,7435.918 C667,7435.918 667,7209.9648 682,7209.9648 L692,7209.9648 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="87" x="692" y="7248.209"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="67" x="702" y="7271.7441">TreeNode</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="90" x="829" y="7248.209"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="70" x="839" y="7271.7441">红黑树节点</text><path d="M779,7266.4531 L789,7266.4531 C804,7266.4531 804,7266.4531 819,7266.4531 L829,7266.4531 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M642,7435.918 L652,7435.918 C667,7435.918 667,7266.4531 682,7266.4531 L692,7266.4531 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="72" x="692" y="7304.6973"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="52" x="702" y="7328.2324">TreeBin</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="398" x="814" y="7304.6973"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="378" x="824" y="7328.2324">就相当于一个红黑树，其构造方法其实就是构造红黑树的过程</text><path d="M764,7322.9414 L774,7322.9414 C789,7322.9414 789,7322.9414 804,7322.9414 L814,7322.9414 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M642,7435.918 L652,7435.918 C667,7435.918 667,7322.9414 682,7322.9414 L692,7322.9414 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="135" x="692" y="7502.4063"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="115" x="702" y="7525.9414">ForwardingNode</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="323" x="877" y="7361.1855"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="303" x="887" y="7384.7207">辅助节点，用于 ConcurrentHashMap 扩容操作</text><path d="M827,7520.6504 L837,7520.6504 C852,7520.6504 852,7379.4297 867,7379.4297 L877,7379.4297 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="66" x="877" y="7530.6504"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="46" x="887" y="7554.1855">sizeCtl</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="328" x="993" y="7417.6738"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="308" x="1003" y="7441.209">控制标识符，用来控制 table 初始化和扩容操作的</text><path d="M943,7548.8945 L953,7548.8945 C968,7548.8945 968,7435.918 983,7435.918 L993,7435.918 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="993" y="7558.8945"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="1003" y="7582.4297">含义</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="244" x="1091" y="7474.1621"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="224" x="1101" y="7497.6973">负数代表正在进行初始化或扩容操作</text><path d="M1041,7577.1387 L1051,7577.1387 C1066,7577.1387 1066,7492.4063 1081,7492.4063 L1091,7492.4063 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="111" x="1091" y="7530.6504"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="91" x="1101" y="7554.1855">-1 代表初始化</text><path d="M1041,7577.1387 L1051,7577.1387 C1066,7577.1387 1066,7548.8945 1081,7548.8945 L1091,7548.8945 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="273" x="1091" y="7587.1387"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="253" x="1101" y="7610.6738">-N 表示有 N-1 个线程正在进行扩容操作</text><path d="M1041,7577.1387 L1051,7577.1387 C1066,7577.1387 1066,7605.3828 1081,7605.3828 L1091,7605.3828 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="551" x="1091" y="7643.627"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="531" x="1101" y="7667.1621">正数或零代表 hash 表还没有被初始化，这个数值表示初始化或进行下一次扩容的大小</text><path d="M1041,7577.1387 L1051,7577.1387 C1066,7577.1387 1066,7661.8711 1081,7661.8711 L1091,7661.8711 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M943,7548.8945 L953,7548.8945 C968,7548.8945 968,7577.1387 983,7577.1387 L993,7577.1387 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M827,7520.6504 L837,7520.6504 C852,7520.6504 852,7548.8945 867,7548.8945 L877,7548.8945 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M642,7435.918 L652,7435.918 C667,7435.918 667,7520.6504 682,7520.6504 L692,7520.6504 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M502,7972.5566 L512,7972.5566 C527,7972.5566 527,7435.918 542,7435.918 L552,7435.918 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="552" y="8208.5098"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="562" y="8232.0449">重要操作</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="80" x="678" y="7841.3359"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="60" x="688" y="7864.8711">initTable</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="235" x="808" y="7700.1152"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="215" x="818" y="7723.6504">ConcurrentHashMap 初始化方法</text><path d="M758,7859.5801 L768,7859.5801 C783,7859.5801 783,7718.3594 798,7718.3594 L808,7718.3594 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="342" x="808" y="7756.6035"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="322" x="818" y="7780.1387">只能由一个线程参与初始化过程，其他线程必须挂起</text><path d="M758,7859.5801 L768,7859.5801 C783,7859.5801 783,7774.8477 798,7774.8477 L808,7774.8477 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="387" x="808" y="7813.0918"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="367" x="818" y="7836.627">构造函数不做初始化过程，初始化真正的是 put 操作中出发</text><path d="M758,7859.5801 L768,7859.5801 C783,7859.5801 783,7831.3359 798,7831.3359 L808,7831.3359 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="808" y="7926.0684"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="818" y="7949.6035">步骤</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="294" x="906" y="7869.5801"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="274" x="916" y="7893.1152">sizeCtl &lt; 0 表示正在进行初始化，线程挂起</text><path d="M856,7944.3125 L866,7944.3125 C881,7944.3125 881,7887.8242 896,7887.8242 L906,7887.8242 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="403" x="906" y="7926.0684"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="383" x="916" y="7949.6035">线程获取初始化资格（CAS(sizeCtl, sc, -1)）进行初始化过程</text><path d="M856,7944.3125 L866,7944.3125 C881,7944.3125 881,7944.3125 896,7944.3125 L906,7944.3125 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="584" x="906" y="7982.5566"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="564" x="916" y="8006.0918">初始化步骤完成以后，设置 sizeCtl = 0.75*n (下一次扩容的阈值)，表示下一次扩容的大小</text><path d="M856,7944.3125 L866,7944.3125 C881,7944.3125 881,8000.8008 896,8000.8008 L906,8000.8008 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M758,7859.5801 L768,7859.5801 C783,7859.5801 783,7944.3125 798,7944.3125 L808,7944.3125 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M628,8226.7539 L638,8226.7539 C653,8226.7539 653,7859.5801 668,7859.5801 L678,7859.5801 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="43" x="678" y="8180.2656"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="23" x="688" y="8203.8008">put</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="771" y="8067.2891"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="781" y="8090.8242">核心思想</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="649" x="897" y="8039.0449"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="629" x="907" y="8062.5801">根据 hash 值计算节点插入在 table 的位置，如果该位置为空，则直接插入，否则插入到链表或者树中</text><path d="M847,8085.5332 L857,8085.5332 C872,8085.5332 872,8057.2891 887,8057.2891 L897,8057.2891 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="132" x="897" y="8095.5332"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="112" x="907" y="8119.0684">真是情况较为复杂</text><path d="M847,8085.5332 L857,8085.5332 C872,8085.5332 872,8113.7773 887,8113.7773 L897,8113.7773 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M721,8198.5098 L731,8198.5098 C746,8198.5098 746,8085.5332 761,8085.5332 L771,8085.5332 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="771" y="8236.7539"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="781" y="8260.2891">步骤</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="530" x="869" y="8152.0215"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="510" x="879" y="8175.5566">table 为 null, 线程进入初始化步骤，如果有其他线程正在进行初始化，该线程挂起</text><path d="M819,8254.998 L829,8254.998 C844,8254.998 844,8170.2656 859,8170.2656 L869,8170.2656 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="1070" x="869" y="8208.5098"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="1050" x="879" y="8232.0449">如果插入的当前 i 位置为 null，说明该位置是第一次插入，利用 CAS 插入节点即可，插入成功，则调用 addCount 判断是否需要扩容。若插入失败，则继续匹配（自旋）</text><path d="M819,8254.998 L829,8254.998 C844,8254.998 844,8226.7539 859,8226.7539 L869,8226.7539 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="532" x="869" y="8264.998"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="512" x="879" y="8288.5332">若该节点的 hash == MOVED(-1) ，表示有线程正在进行扩容，则进入扩容进程中</text><path d="M819,8254.998 L829,8254.998 C844,8254.998 844,8283.2422 859,8283.2422 L869,8283.2422 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="589" x="869" y="8321.4863"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="569" x="879" y="8345.0215">其余情况就是按照链表或者红黑树结构插入节点，但是这个过程需要加锁（Synchronized）</text><path d="M819,8254.998 L829,8254.998 C844,8254.998 844,8339.7305 859,8339.7305 L869,8339.7305 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M721,8198.5098 L731,8198.5098 C746,8198.5098 746,8254.998 761,8254.998 L771,8254.998 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M628,8226.7539 L638,8226.7539 C653,8226.7539 653,8198.5098 668,8198.5098 L678,8198.5098 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="42" x="678" y="8406.2188"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="22" x="688" y="8429.7539">get</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="770" y="8406.2188"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="780" y="8429.7539">步骤</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="195" x="868" y="8377.9746"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="175" x="878" y="8401.5098">table == null; return null;</text><path d="M818,8424.4629 L828,8424.4629 C843,8424.4629 843,8396.2188 858,8396.2188 L868,8396.2188 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="175" x="868" y="8434.4629"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="155" x="878" y="8457.998">从 链表/红黑树 节点获取</text><path d="M818,8424.4629 L828,8424.4629 C843,8424.4629 843,8452.707 858,8452.707 L868,8452.707 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M720,8424.4629 L730,8424.4629 C745,8424.4629 745,8424.4629 760,8424.4629 L770,8424.4629 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M628,8226.7539 L638,8226.7539 C653,8226.7539 653,8424.4629 668,8424.4629 L678,8424.4629 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="678" y="8547.4395"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="688" y="8570.9746">扩容</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="90" x="776" y="8490.9512"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="70" x="786" y="8514.4863">多线程扩容</text><path d="M726,8565.6836 L736,8565.6836 C751,8565.6836 751,8509.1953 766,8509.1953 L776,8509.1953 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="776" y="8575.6836"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="786" y="8599.2188">步骤</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="513" x="874" y="8547.4395"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="493" x="884" y="8570.9746">构建一个 nextTable，其大小为原来的两倍，这个步骤是在单线程环境下完成的</text><path d="M824,8593.9277 L834,8593.9277 C849,8593.9277 849,8565.6836 864,8565.6836 L874,8565.6836 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="489" x="874" y="8603.9277"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="469" x="884" y="8627.4629">将原来 table 里边的内容复制到 nextTable 中，这个步骤是允许多线程操作</text><path d="M824,8593.9277 L834,8593.9277 C849,8593.9277 849,8622.1719 864,8622.1719 L874,8622.1719 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M726,8565.6836 L736,8565.6836 C751,8565.6836 751,8593.9277 766,8593.9277 L776,8593.9277 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M628,8226.7539 L638,8226.7539 C653,8226.7539 653,8565.6836 668,8565.6836 L678,8565.6836 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="160" x="678" y="8688.6602"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="140" x="688" y="8712.1953">链表转化为红黑树过程</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="387" x="888" y="8660.416"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="367" x="898" y="8683.9512">所在链表的元素个数达到了阈值 8 ，则将链表转换为红黑树</text><path d="M838,8706.9043 L848,8706.9043 C863,8706.9043 863,8678.6602 878,8678.6602 L888,8678.6602 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="90" x="888" y="8716.9043"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="70" x="898" y="8740.4395">红黑树算法</text><path d="M838,8706.9043 L848,8706.9043 C863,8706.9043 863,8735.1484 878,8735.1484 L888,8735.1484 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M628,8226.7539 L638,8226.7539 C653,8226.7539 653,8706.9043 668,8706.9043 L678,8706.9043 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M502,7972.5566 L512,7972.5566 C527,7972.5566 527,8226.7539 542,8226.7539 L552,8226.7539 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="132" x="552" y="8773.3926"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="112" x="562" y="8796.9277">1.7 和 1.8 的区别</text><path d="M502,7972.5566 L512,7972.5566 C527,7972.5566 527,8791.6367 542,8791.6367 L552,8791.6367 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M291,8460.9512 L301,8460.9512 C316,8460.9512 316,7972.5566 331,7972.5566 L341,7972.5566 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="188" x="341" y="9027.5898"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="168" x="351" y="9051.125">ConcurrentLinkedQueue</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="599" x="579" y="8829.8809"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="579" x="589" y="8853.416">基于链接节点的无边界的线程安全队列，采用 FIFO 原则对元素进行排序，内部采用 CAS 算法</text><path d="M529,9045.834 L539,9045.834 C554,9045.834 554,8848.125 569,8848.125 L579,8848.125 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="579" y="8971.1016"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="589" y="8994.6367">不变性</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="257" x="691" y="8886.3691"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="237" x="701" y="8909.9043">在入队的最后一个元素的 next 为 null</text><path d="M641,8989.3457 L651,8989.3457 C666,8989.3457 666,8904.6133 681,8904.6133 L691,8904.6133 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="494" x="691" y="8942.8574"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="474" x="701" y="8966.3926">队列中所有未删除的节点的 item 都不能为 null，且都能从 head 节点遍历到</text><path d="M641,8989.3457 L651,8989.3457 C666,8989.3457 666,8961.1016 681,8961.1016 L691,8961.1016 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="750" x="691" y="8999.3457"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="730" x="701" y="9022.8809">对于要删除的节点，不是直接将其设置为 null，而是将其 item 值设置为 null，（迭代器会跳过 item 为 null 的节点）</text><path d="M641,8989.3457 L651,8989.3457 C666,8989.3457 666,9017.5898 681,9017.5898 L691,9017.5898 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="756" x="691" y="9055.834"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="736" x="701" y="9079.3691">允许 head 和 tail 更新之后。这是什么意思呢？意思是说 head、tail 不总只想第一个元素和最后一个元素（后面阐述）</text><path d="M641,8989.3457 L651,8989.3457 C666,8989.3457 666,9074.0781 681,9074.0781 L691,9074.0781 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M529,9045.834 L539,9045.834 C554,9045.834 554,8989.3457 569,8989.3457 L579,8989.3457 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="170" x="579" y="9112.3223"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="150" x="589" y="9135.8574">head 的不变性和可变性</text><path d="M529,9045.834 L539,9045.834 C554,9045.834 554,9130.5664 569,9130.5664 L579,9130.5664 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="157" x="579" y="9168.8105"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="137" x="589" y="9192.3457">tail 的不变性和可变性</text><path d="M529,9045.834 L539,9045.834 C554,9045.834 554,9187.0547 569,9187.0547 L579,9187.0547 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="574" x="579" y="9225.2988"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="554" x="589" y="9248.834">精妙之处：利用 CAS 来完成数据操作，同时允许队列的不一致性，弱一致性表现淋漓尽致</text><path d="M529,9045.834 L539,9045.834 C554,9045.834 554,9243.543 569,9243.543 L579,9243.543 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M291,8460.9512 L301,8460.9512 C316,8460.9512 316,9045.834 331,9045.834 L341,9045.834 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="179" x="341" y="9515.9844"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="159" x="351" y="9539.5195">ConcurrentSkipListMap</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="305" x="570" y="9281.7871"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="285" x="580" y="9305.3223">第三种 key-value 数据结构：SkipList( 跳表 )</text><path d="M520,9534.2285 L530,9534.2285 C545,9534.2285 545,9300.0313 560,9300.0313 L570,9300.0313 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="71" x="570" y="9544.2285"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="51" x="580" y="9567.7637">skipList</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="90" x="691" y="9338.2754"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="70" x="701" y="9361.8105">平衡二叉树</text><path d="M641,9562.4727 L651,9562.4727 C666,9562.4727 666,9356.5195 681,9356.5195 L691,9356.5195 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="52.9766" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="808" x="691" y="9394.7637"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="788" x="701" y="9418.2988">SkipList 让已排序的数据分布在多层链表中，以 0-1 随机数决定一个数据的向上攀升与否，通过“空间来换取时间”的一个算法，</text><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="658" x="768" y="9434.7871">在每个节点中增加了向前的指针，在插入、删除、查找是可以忽略一些不可能涉及的结点，从而提高了效率</text><path d="M641,9562.4727 L651,9562.4727 C666,9562.4727 666,9421.252 681,9421.252 L691,9421.252 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="691" y="9580.7168"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="701" y="9604.252">特性</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="363" x="789" y="9467.7402"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="343" x="799" y="9491.2754">由很多层结构组成，level 是通过一定的概率随机产生的</text><path d="M739,9598.9609 L749,9598.9609 C764,9598.9609 764,9485.9844 779,9485.9844 L789,9485.9844 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="797" x="789" y="9524.2285"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="777" x="799" y="9547.7637">每一层都是一个有序的列表，默认是升序，也可以根据创建映射所提供的 Comparator 进行排序，具体取决于使用的构造方法</text><path d="M739,9598.9609 L749,9598.9609 C764,9598.9609 764,9542.4727 779,9542.4727 L789,9542.4727 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="277" x="789" y="9580.7168"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="257" x="799" y="9604.252">最底层（Level 1）的链表所包含所有元素</text><path d="M739,9598.9609 L749,9598.9609 C764,9598.9609 764,9598.9609 779,9598.9609 L789,9598.9609 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="484" x="789" y="9637.2051"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="464" x="799" y="9660.7402">如果一个元素出现在 Level i 的链表中，则它在 Level i 之下的链表也都会出</text><path d="M739,9598.9609 L749,9598.9609 C764,9598.9609 764,9655.4492 779,9655.4492 L789,9655.4492 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="580" x="789" y="9693.6934"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="560" x="799" y="9717.2285">每个节点都包含两个指针，一个指向同一个链表中的下一个元素，一个指向下面一层的元素</text><path d="M739,9598.9609 L749,9598.9609 C764,9598.9609 764,9711.9375 779,9711.9375 L789,9711.9375 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M641,9562.4727 L651,9562.4727 C666,9562.4727 666,9598.9609 681,9598.9609 L691,9598.9609 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="132" x="691" y="9750.1816"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="112" x="701" y="9773.7168">查找、删除、添加</text><path d="M641,9562.4727 L651,9562.4727 C666,9562.4727 666,9768.4258 681,9768.4258 L691,9768.4258 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M520,9534.2285 L530,9534.2285 C545,9534.2285 545,9562.4727 560,9562.4727 L570,9562.4727 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M291,8460.9512 L301,8460.9512 C316,8460.9512 316,9534.2285 331,9534.2285 L341,9534.2285 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="171" x="341" y="9572.4727"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="151" x="351" y="9596.0078">ConcurrentSkipListSet</text><path d="M291,8460.9512 L301,8460.9512 C316,8460.9512 316,9590.7168 331,9590.7168 L341,9590.7168 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M117,7473.5518 L127,7473.5518 C142,7473.5518 142,8460.9512 157,8460.9512 L167,8460.9512 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="85" x="167" y="10230.332"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="65" x="177" y="10253.8672">7. Atomic</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="90" x="302" y="9891.4023"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="70" x="312" y="9914.9375">基本类型类</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="230" x="442" y="9806.6699"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="210" x="452" y="9830.2051">用于通过原子的方式更新基本类型</text><path d="M392,9909.6465 L402,9909.6465 C417,9909.6465 417,9824.9141 432,9824.9141 L442,9824.9141 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="123" x="442" y="9863.1582"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="103" x="452" y="9886.6934">AtomicBoolean</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="132" x="615" y="9863.1582"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="112" x="625" y="9886.6934">原子更新布尔类型</text><path d="M565,9881.4023 L575,9881.4023 C590,9881.4023 590,9881.4023 605,9881.4023 L615,9881.4023 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M392,9909.6465 L402,9909.6465 C417,9909.6465 417,9881.4023 432,9881.4023 L442,9881.4023 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="117" x="442" y="9919.6465"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="97" x="452" y="9943.1816">AtomicInteger</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="104" x="609" y="9919.6465"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="84" x="619" y="9943.1816">原子更新整形</text><path d="M559,9937.8906 L569,9937.8906 C584,9937.8906 584,9937.8906 599,9937.8906 L609,9937.8906 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M392,9909.6465 L402,9909.6465 C417,9909.6465 417,9937.8906 432,9937.8906 L442,9937.8906 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="102" x="442" y="9976.1348"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="82" x="452" y="9999.6699">AtomicLong</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="118" x="594" y="9976.1348"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="98" x="604" y="9999.6699">原子更新长整型</text><path d="M544,9994.3789 L554,9994.3789 C569,9994.3789 569,9994.3789 584,9994.3789 L594,9994.3789 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M392,9909.6465 L402,9909.6465 C417,9909.6465 417,9994.3789 432,9994.3789 L442,9994.3789 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M252,10248.5762 L262,10248.5762 C277,10248.5762 277,9909.6465 292,9909.6465 L302,9909.6465 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="302" y="10117.3555"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="312" y="10140.8906">数组</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="258" x="400" y="10032.623"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="238" x="410" y="10056.1582">通过原子的方式更新数组里的某个元素</text><path d="M350,10135.5996 L360,10135.5996 C375,10135.5996 375,10050.8672 390,10050.8672 L400,10050.8672 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="154" x="400" y="10089.1113"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="134" x="410" y="10112.6465">AtomicIntegerArray</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="188" x="604" y="10089.1113"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="168" x="614" y="10112.6465">原子更新整型数组里的元素</text><path d="M554,10107.3555 L564,10107.3555 C579,10107.3555 579,10107.3555 594,10107.3555 L604,10107.3555 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M350,10135.5996 L360,10135.5996 C375,10135.5996 375,10107.3555 390,10107.3555 L400,10107.3555 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="139" x="400" y="10145.5996"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="119" x="410" y="10169.1348">AtomicLongArray</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="202" x="589" y="10145.5996"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="182" x="599" y="10169.1348">原子更新长整型数组里的元素</text><path d="M539,10163.8438 L549,10163.8438 C564,10163.8438 564,10163.8438 579,10163.8438 L589,10163.8438 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M350,10135.5996 L360,10135.5996 C375,10135.5996 375,10163.8438 390,10163.8438 L400,10163.8438 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="173" x="400" y="10202.0879"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="153" x="410" y="10225.623">AtomicReferenceArray</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="216" x="623" y="10202.0879"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="196" x="633" y="10225.623">原子更新引用类型数组里的元素</text><path d="M573,10220.332 L583,10220.332 C598,10220.332 598,10220.332 613,10220.332 L623,10220.332 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M350,10135.5996 L360,10135.5996 C375,10135.5996 375,10220.332 390,10220.332 L400,10220.332 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M252,10248.5762 L262,10248.5762 C277,10248.5762 277,10135.5996 292,10135.5996 L302,10135.5996 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="302" y="10343.3086"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="312" y="10366.8438">引用类型</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="468" x="428" y="10258.5762"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="448" x="438" y="10282.1113">如果要原子的更新多个变量，就需要使用这个原子更新引用类型提供的类</text><path d="M378,10361.5527 L388,10361.5527 C403,10361.5527 403,10276.8203 418,10276.8203 L428,10276.8203 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="136" x="428" y="10315.0645"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="116" x="438" y="10338.5996">AtomicReference</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="132" x="614" y="10315.0645"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="112" x="624" y="10338.5996">原子更新引用类型</text><path d="M564,10333.3086 L574,10333.3086 C589,10333.3086 589,10333.3086 604,10333.3086 L614,10333.3086 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M378,10361.5527 L388,10361.5527 C403,10361.5527 403,10333.3086 418,10333.3086 L428,10333.3086 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="224" x="428" y="10371.5527"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="204" x="438" y="10395.0879">AtomicReferenceFieldUpdater</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="188" x="702" y="10371.5527"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="168" x="712" y="10395.0879">原子更新引用类型里的字段</text><path d="M652,10389.7969 L662,10389.7969 C677,10389.7969 677,10389.7969 692,10389.7969 L702,10389.7969 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M378,10361.5527 L388,10361.5527 C403,10361.5527 403,10389.7969 418,10389.7969 L428,10389.7969 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="199" x="428" y="10428.041"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="179" x="438" y="10451.5762">AtomicMarkableReference</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="230" x="677" y="10428.041"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="210" x="687" y="10451.5762">原子更新带有白哦极为的引用类型</text><path d="M627,10446.2852 L637,10446.2852 C652,10446.2852 652,10446.2852 667,10446.2852 L677,10446.2852 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M378,10361.5527 L388,10361.5527 C403,10361.5527 403,10446.2852 418,10446.2852 L428,10446.2852 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M252,10248.5762 L262,10248.5762 C277,10248.5762 277,10361.5527 292,10361.5527 L302,10361.5527 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="302" y="10569.2617"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="312" y="10592.7969">字段类</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="454" x="414" y="10484.5293"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="434" x="424" y="10508.0645">如果我们只需要某个类里的某个字段，那么就需要使用原子更新字段类</text><path d="M364,10587.5059 L374,10587.5059 C389,10587.5059 389,10502.7734 404,10502.7734 L414,10502.7734 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="205" x="414" y="10541.0176"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="185" x="424" y="10564.5527">AtomicIntegerFieldUpdater</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="202" x="669" y="10541.0176"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="182" x="679" y="10564.5527">原子更新整型的字段的更新器</text><path d="M619,10559.2617 L629,10559.2617 C644,10559.2617 644,10559.2617 659,10559.2617 L669,10559.2617 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M364,10587.5059 L374,10587.5059 C389,10587.5059 389,10559.2617 404,10559.2617 L414,10559.2617 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="190" x="414" y="10597.5059"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="170" x="424" y="10621.041">AtomicLongFieldUpdater</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="202" x="654" y="10597.5059"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="182" x="664" y="10621.041">原子更新长整型字段的更新器</text><path d="M604,10615.75 L614,10615.75 C629,10615.75 629,10615.75 644,10615.75 L654,10615.75 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M364,10587.5059 L374,10587.5059 C389,10587.5059 389,10615.75 404,10615.75 L414,10615.75 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="196" x="414" y="10653.9941"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="176" x="424" y="10677.5293">AtomicStampedReference</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="216" x="660" y="10653.9941"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="196" x="670" y="10677.5293">原子更新带有版本号的引用类型</text><path d="M610,10672.2383 L620,10672.2383 C635,10672.2383 635,10672.2383 650,10672.2383 L660,10672.2383 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M364,10587.5059 L374,10587.5059 C389,10587.5059 389,10672.2383 404,10672.2383 L414,10672.2383 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M252,10248.5762 L262,10248.5762 C277,10248.5762 277,10587.5059 292,10587.5059 L302,10587.5059 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M117,7473.5518 L127,7473.5518 C142,7473.5518 142,10248.5762 157,10248.5762 L167,10248.5762 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="93" x="167" y="11501.3184"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="73" x="177" y="11524.8535">8. 阻塞队列</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="160" x="310" y="10823.459"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="140" x="320" y="10846.9941">ArrayBlockingQueue</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="255" x="520" y="10710.4824"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="235" x="530" y="10734.0176">一个由数组实现的 FIFO 有界阻塞队列</text><path d="M470,10841.7031 L480,10841.7031 C495,10841.7031 495,10728.7266 510,10728.7266 L520,10728.7266 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="514" x="520" y="10766.9707"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="494" x="530" y="10790.5059">ArrayBlockingQueue 有界且固定，在构造函数时确认大小，确认后不支持改变</text><path d="M470,10841.7031 L480,10841.7031 C495,10841.7031 495,10785.2148 510,10785.2148 L520,10785.2148 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="218" x="520" y="10823.459"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="198" x="530" y="10846.9941">在多线程环境下不保证 “公平性”</text><path d="M470,10841.7031 L480,10841.7031 C495,10841.7031 495,10841.7031 510,10841.7031 L520,10841.7031 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="520" y="10908.1914"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="530" y="10931.7266">实现</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="118" x="618" y="10879.9473"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="98" x="628" y="10903.4824">ReentrantLock</text><path d="M568,10926.4355 L578,10926.4355 C593,10926.4355 593,10898.1914 608,10898.1914 L618,10898.1914 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="88" x="618" y="10936.4355"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="68" x="628" y="10959.9707">Condition</text><path d="M568,10926.4355 L578,10926.4355 C593,10926.4355 593,10954.6797 608,10954.6797 L618,10954.6797 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M470,10841.7031 L480,10841.7031 C495,10841.7031 495,10926.4355 510,10926.4355 L520,10926.4355 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M260,11519.5625 L270,11519.5625 C285,11519.5625 285,10841.7031 300,10841.7031 L310,10841.7031 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="168" x="310" y="11190.6328"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="148" x="320" y="11214.168">LinkedBlockingQueue</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="227" x="528" y="10992.9238"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="207" x="538" y="11016.459">基于链接、无界的 FIFO 阻塞队列</text><path d="M478,11208.877 L488,11208.877 C503,11208.877 503,11011.168 518,11011.168 L528,11011.168 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="559" x="528" y="11049.4121"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="539" x="538" y="11072.9473">默认情况下元素采用自然顺序升序排序，可以通过指定 Comparator 来对元素进行排序</text><path d="M478,11208.877 L488,11208.877 C503,11208.877 503,11067.6563 518,11067.6563 L528,11067.6563 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="528" y="11190.6328"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="538" y="11214.168">二叉堆</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="640" y="11105.9004"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="650" y="11129.4355">分类</text><path d="M590,11208.877 L600,11208.877 C615,11208.877 615,11124.1445 630,11124.1445 L640,11124.1445 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="640" y="11162.3887"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="650" y="11185.9238">最大堆</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="342" x="752" y="11162.3887"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="322" x="762" y="11185.9238">父节点的键值总是大于或等于任何一个子节点的键值</text><path d="M702,11180.6328 L712,11180.6328 C727,11180.6328 727,11180.6328 742,11180.6328 L752,11180.6328 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M590,11208.877 L600,11208.877 C615,11208.877 615,11180.6328 630,11180.6328 L640,11180.6328 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="640" y="11218.877"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="650" y="11242.4121">最小堆</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="342" x="752" y="11218.877"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="322" x="762" y="11242.4121">父节点的键值总是小于或等于任何一个子节点的键值</text><path d="M702,11237.1211 L712,11237.1211 C727,11237.1211 727,11237.1211 742,11237.1211 L752,11237.1211 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M590,11208.877 L600,11208.877 C615,11208.877 615,11237.1211 630,11237.1211 L640,11237.1211 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="360" x="640" y="11275.3652"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="340" x="650" y="11298.9004">添加操作则是不断 “上冒”，而删除操作则是不断 “下掉”</text><path d="M590,11208.877 L600,11208.877 C615,11208.877 615,11293.6094 630,11293.6094 L640,11293.6094 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M478,11208.877 L488,11208.877 C503,11208.877 503,11208.877 518,11208.877 L528,11208.877 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="528" y="11360.0977"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="538" y="11383.6328">实现</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="205" x="626" y="11331.8535"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="185" x="636" y="11355.3887">ReentrantLock + Condition</text><path d="M576,11378.3418 L586,11378.3418 C601,11378.3418 601,11350.0977 616,11350.0977 L626,11350.0977 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="62" x="626" y="11388.3418"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="42" x="636" y="11411.877">二叉堆</text><path d="M576,11378.3418 L586,11378.3418 C601,11378.3418 601,11406.5859 616,11406.5859 L626,11406.5859 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M478,11208.877 L488,11208.877 C503,11208.877 503,11378.3418 518,11378.3418 L528,11378.3418 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M260,11519.5625 L270,11519.5625 C285,11519.5625 285,11208.877 300,11208.877 L310,11208.877 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="102" x="310" y="11614.2949"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="82" x="320" y="11637.8301">DelayQueue</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="230" x="462" y="11444.8301"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="210" x="472" y="11468.3652">支持延时获取元素的无界阻塞队列</text><path d="M412,11632.5391 L422,11632.5391 C437,11632.5391 437,11463.0742 452,11463.0742 L462,11463.0742 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="462" y="11529.5625"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="472" y="11553.0977">应用</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="230" x="560" y="11501.3184"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="210" x="570" y="11524.8535">缓存：清掉缓存中超时的缓存数据</text><path d="M510,11547.8066 L520,11547.8066 C535,11547.8066 535,11519.5625 550,11519.5625 L560,11519.5625 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="104" x="560" y="11557.8066"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="84" x="570" y="11581.3418">任务超时数据</text><path d="M510,11547.8066 L520,11547.8066 C535,11547.8066 535,11576.0508 550,11576.0508 L560,11576.0508 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M412,11632.5391 L422,11632.5391 C437,11632.5391 437,11547.8066 452,11547.8066 L462,11547.8066 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="462" y="11642.5391"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="472" y="11666.0742">实现</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="205" x="560" y="11614.2949"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="185" x="570" y="11637.8301">ReentrantLock + Condition</text><path d="M510,11660.7832 L520,11660.7832 C535,11660.7832 535,11632.5391 550,11632.5391 L560,11632.5391 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="341" x="560" y="11670.7832"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="321" x="570" y="11694.3184">根据 Delay 时间排序的优先级队列：PriorityQueue</text><path d="M510,11660.7832 L520,11660.7832 C535,11660.7832 535,11689.0273 550,11689.0273 L560,11689.0273 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M412,11632.5391 L422,11632.5391 C437,11632.5391 437,11660.7832 452,11660.7832 L462,11660.7832 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="106" x="462" y="11755.5156"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="86" x="472" y="11779.0508">Delayed 接口</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="328" x="618" y="11727.2715"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="308" x="628" y="11750.8066">用来标记那些应该在给定延迟时间之后执行的对象</text><path d="M568,11773.7598 L578,11773.7598 C593,11773.7598 593,11745.5156 608,11745.5156 L618,11745.5156 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="705" x="618" y="11783.7598"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="685" x="628" y="11807.2949">该接口要求实现它的实现类必须定义一个 compareTo 方法，该方法提供给此接口的 getDelay 方法一致的排序</text><path d="M568,11773.7598 L578,11773.7598 C593,11773.7598 593,11802.0039 608,11802.0039 L618,11802.0039 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M412,11632.5391 L422,11632.5391 C437,11632.5391 437,11773.7598 452,11773.7598 L462,11773.7598 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M260,11519.5625 L270,11519.5625 C285,11519.5625 285,11632.5391 300,11632.5391 L310,11632.5391 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="154" x="310" y="11896.7363"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="134" x="320" y="11920.2715">SynchronousQueue</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="174" x="514" y="11840.248"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="154" x="524" y="11863.7832">一个没有容量的阻塞队列</text><path d="M464,11914.9805 L474,11914.9805 C489,11914.9805 489,11858.4922 504,11858.4922 L514,11858.4922 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="514" y="11896.7363"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="524" y="11920.2715">应用</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="496" x="612" y="11896.7363"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="476" x="622" y="11920.2715">交换工作，生产者的线程和消费者的线程同步以传递某些信息、事件或者任务</text><path d="M562,11914.9805 L572,11914.9805 C587,11914.9805 587,11914.9805 602,11914.9805 L612,11914.9805 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M464,11914.9805 L474,11914.9805 C489,11914.9805 489,11914.9805 504,11914.9805 L514,11914.9805 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="213" x="514" y="11953.2246"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="193" x="524" y="11976.7598">难搞懂，与 Exchanger 有一拼</text><path d="M464,11914.9805 L474,11914.9805 C489,11914.9805 489,11971.4688 504,11971.4688 L514,11971.4688 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M260,11519.5625 L270,11519.5625 C285,11519.5625 285,11914.9805 300,11914.9805 L310,11914.9805 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="168" x="310" y="12066.2012"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="148" x="320" y="12089.7363">LinkedTransferQueue</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="174" x="528" y="12009.7129"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="154" x="538" y="12033.248">链表组成的无界阻塞队列</text><path d="M478,12084.4453 L488,12084.4453 C503,12084.4453 503,12027.957 518,12027.957 L528,12027.957 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="751" x="528" y="12066.2012"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="731" x="538" y="12089.7363">相当于， ConcurrentLinkedQueue、SynchronousQueue(公平模式下)、无界的 LinkedBlockingQueues 等的超集</text><path d="M478,12084.4453 L488,12084.4453 C503,12084.4453 503,12084.4453 518,12084.4453 L528,12084.4453 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="528" y="12122.6895"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="538" y="12146.2246">预占模式</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="412" x="654" y="12122.6895"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="392" x="664" y="12146.2246">有就直接拿走，没有就占着这个位置直到拿到或者超时或者中断</text><path d="M604,12140.9336 L614,12140.9336 C629,12140.9336 629,12140.9336 644,12140.9336 L654,12140.9336 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M478,12084.4453 L488,12084.4453 C503,12084.4453 503,12140.9336 518,12140.9336 L528,12140.9336 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M260,11519.5625 L270,11519.5625 C285,11519.5625 285,12084.4453 300,12084.4453 L310,12084.4453 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="167" x="310" y="12235.666"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="147" x="320" y="12259.2012">LinkedBlockingDeque</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="188" x="527" y="12179.1777"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="168" x="537" y="12202.7129">由链表组成的双向阻塞队列</text><path d="M477,12253.9102 L487,12253.9102 C502,12253.9102 502,12197.4219 517,12197.4219 L527,12197.4219 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="677" x="527" y="12235.666"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="657" x="537" y="12259.2012">容量可选，在初始化时可以设置容量防止其过度膨胀，如果不设置，默认容量大小为 Integer.MAX_VALUE</text><path d="M477,12253.9102 L487,12253.9102 C502,12253.9102 502,12253.9102 517,12253.9102 L527,12253.9102 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="527" y="12292.1543"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="537" y="12315.6895">运用</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="120" x="625" y="12292.1543"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="100" x="635" y="12315.6895">“工作窃取” 模式</text><path d="M575,12310.3984 L585,12310.3984 C600,12310.3984 600,12310.3984 615,12310.3984 L625,12310.3984 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M477,12253.9102 L487,12253.9102 C502,12253.9102 502,12310.3984 517,12310.3984 L527,12310.3984 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M260,11519.5625 L270,11519.5625 C285,11519.5625 285,12253.9102 300,12253.9102 L310,12253.9102 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M117,7473.5518 L127,7473.5518 C142,7473.5518 142,11519.5625 157,11519.5625 L167,11519.5625 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="79" x="167" y="13619.6289"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="59" x="177" y="13643.1641">9. 线程池</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="296" y="12405.1309"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="306" y="12428.666">好处</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="104" x="394" y="12348.6426"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="84" x="404" y="12372.1777">降低资源消耗</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="384" x="548" y="12348.6426"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="364" x="558" y="12372.1777">通过重复利用已创建的线程降低线程创建和销毁造成的消耗</text><path d="M498,12366.8867 L508,12366.8867 C523,12366.8867 523,12366.8867 538,12366.8867 L548,12366.8867 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M344,12423.375 L354,12423.375 C369,12423.375 369,12366.8867 384,12366.8867 L394,12366.8867 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="104" x="394" y="12405.1309"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="84" x="404" y="12428.666">提高响应速度</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="384" x="548" y="12405.1309"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="364" x="558" y="12428.666">当任务到达时，任务可以不需要等到线程创建就能立即执行</text><path d="M498,12423.375 L508,12423.375 C523,12423.375 523,12423.375 538,12423.375 L548,12423.375 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M344,12423.375 L354,12423.375 C369,12423.375 369,12423.375 384,12423.375 L394,12423.375 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="146" x="394" y="12461.6191"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="126" x="404" y="12485.1543">提高线程的可管理性</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="188" x="590" y="12461.6191"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="168" x="600" y="12485.1543">进行统一分配、调优和监控</text><path d="M540,12479.8633 L550,12479.8633 C565,12479.8633 565,12479.8633 580,12479.8633 L590,12479.8633 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M344,12423.375 L354,12423.375 C369,12423.375 369,12479.8633 384,12479.8633 L394,12479.8633 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M246,13637.873 L256,13637.873 C271,13637.873 271,12423.375 286,12423.375 L296,12423.375 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="81" x="296" y="13534.8965"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="61" x="306" y="13558.4316">Executor</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="88" x="427" y="12518.1074"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="68" x="437" y="12541.6426">Executors</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="840" x="565" y="12518.1074"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="820" x="575" y="12541.6426">静态工厂类，提供了 Executor、ExecutorService、ScheduledExecutorService、ThreadFactory、Callable 等类的静态工厂方法</text><path d="M515,12536.3516 L525,12536.3516 C540,12536.3516 540,12536.3516 555,12536.3516 L565,12536.3516 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M377,13553.1406 L387,13553.1406 C402,13553.1406 402,12536.3516 417,12536.3516 L427,12536.3516 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="160" x="427" y="13478.4082"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="140" x="437" y="13501.9434">ThreadPoolExecutor</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="637" y="12998.2578"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="647" y="13021.793">参数含义</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="108" x="763" y="12574.5957"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="88" x="773" y="12598.1309">corePoolSize</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="174" x="921" y="12574.5957"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="154" x="931" y="12598.1309">线程池中核心线程的数量</text><path d="M871,12592.8398 L881,12592.8398 C896,12592.8398 896,12592.8398 911,12592.8398 L921,12592.8398 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M713,13016.502 L723,13016.502 C738,13016.502 738,12592.8398 753,12592.8398 L763,12592.8398 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="147" x="763" y="12631.084"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="127" x="773" y="12654.6191">maximumPoolSize</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="188" x="960" y="12631.084"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="168" x="970" y="12654.6191">线程池中允许的最大线程数</text><path d="M910,12649.3281 L920,12649.3281 C935,12649.3281 935,12649.3281 950,12649.3281 L960,12649.3281 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M713,13016.502 L723,13016.502 C738,13016.502 738,12649.3281 753,12649.3281 L763,12649.3281 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="120" x="763" y="12687.5723"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="100" x="773" y="12711.1074">keepAliveTime</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="118" x="933" y="12687.5723"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="98" x="943" y="12711.1074">线程空闲的时间</text><path d="M883,12705.8164 L893,12705.8164 C908,12705.8164 908,12705.8164 923,12705.8164 L933,12705.8164 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M713,13016.502 L723,13016.502 C738,13016.502 738,12705.8164 753,12705.8164 L763,12705.8164 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="47" x="763" y="12744.0605"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="27" x="773" y="12767.5957">unit</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="166" x="860" y="12744.0605"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="146" x="870" y="12767.5957">keepAliveTime 的单位</text><path d="M810,12762.3047 L820,12762.3047 C835,12762.3047 835,12762.3047 850,12762.3047 L860,12762.3047 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M713,13016.502 L723,13016.502 C738,13016.502 738,12762.3047 753,12762.3047 L763,12762.3047 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="99" x="763" y="12913.5254"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="79" x="773" y="12937.0605">workQueue</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="244" x="912" y="12800.5488"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="224" x="922" y="12824.084">用来保存等待执行的任务的阻塞队列</text><path d="M862,12931.7695 L872,12931.7695 C887,12931.7695 887,12818.793 902,12818.793 L912,12818.793 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="118" x="912" y="12941.7695"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="98" x="922" y="12965.3047">使用的阻塞队列</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="160" x="1080" y="12857.0371"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="140" x="1090" y="12880.5723">ArrayBlockingQueue</text><path d="M1030,12960.0137 L1040,12960.0137 C1055,12960.0137 1055,12875.2813 1070,12875.2813 L1080,12875.2813 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="168" x="1080" y="12913.5254"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="148" x="1090" y="12937.0605">LinkedBlockingQueue</text><path d="M1030,12960.0137 L1040,12960.0137 C1055,12960.0137 1055,12931.7695 1070,12931.7695 L1080,12931.7695 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="154" x="1080" y="12970.0137"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="134" x="1090" y="12993.5488">SynchronousQueue</text><path d="M1030,12960.0137 L1040,12960.0137 C1055,12960.0137 1055,12988.2578 1070,12988.2578 L1080,12988.2578 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="172" x="1080" y="13026.502"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="152" x="1090" y="13050.0371">PriorityBlockingQueue</text><path d="M1030,12960.0137 L1040,12960.0137 C1055,12960.0137 1055,13044.7461 1070,13044.7461 L1080,13044.7461 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M862,12931.7695 L872,12931.7695 C887,12931.7695 887,12960.0137 902,12960.0137 L912,12960.0137 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M713,13016.502 L723,13016.502 C738,13016.502 738,12931.7695 753,12931.7695 L763,12931.7695 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="115" x="763" y="13111.2344"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="95" x="773" y="13134.7695">threadFactory</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="174" x="928" y="13082.9902"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="154" x="938" y="13106.5254">用于设置创建线程的工厂</text><path d="M878,13129.4785 L888,13129.4785 C903,13129.4785 903,13101.2344 918,13101.2344 L928,13101.2344 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="168" x="928" y="13139.4785"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="148" x="938" y="13163.0137">DefaultThreadFactory</text><path d="M878,13129.4785 L888,13129.4785 C903,13129.4785 903,13157.7227 918,13157.7227 L928,13157.7227 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M713,13016.502 L723,13016.502 C738,13016.502 738,13129.4785 753,13129.4785 L763,13129.4785 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="73" x="763" y="13308.9434"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="53" x="773" y="13332.4785">handler</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="326" x="886" y="13195.9668"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="306" x="896" y="13219.502">RejectedExecutionHandler，线程池的拒绝策略</text><path d="M836,13327.1875 L846,13327.1875 C861,13327.1875 861,13214.2109 876,13214.2109 L886,13214.2109 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="886" y="13337.1875"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="896" y="13360.7227">分类</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="266" x="984" y="13252.4551"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="246" x="994" y="13275.9902">AbortPolicy：直接抛出异常，默认策略</text><path d="M934,13355.4316 L944,13355.4316 C959,13355.4316 959,13270.6992 974,13270.6992 L984,13270.6992 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="337" x="984" y="13308.9434"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="317" x="994" y="13332.4785">CallerRunsPolicy: 用调用者所在的线程来执行任务</text><path d="M934,13355.4316 L944,13355.4316 C959,13355.4316 959,13327.1875 974,13327.1875 L984,13327.1875 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="456" x="984" y="13365.4316"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="436" x="994" y="13388.9668">DiscardOldestPolicy: 丢弃阻塞队列中靠最前的任务，并执行当前任务</text><path d="M934,13355.4316 L944,13355.4316 C959,13355.4316 959,13383.6758 974,13383.6758 L984,13383.6758 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="202" x="984" y="13421.9199"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="182" x="994" y="13445.4551">DiscardPolicy: 直接丢弃任务</text><path d="M934,13355.4316 L944,13355.4316 C959,13355.4316 959,13440.1641 974,13440.1641 L984,13440.1641 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M836,13327.1875 L846,13327.1875 C861,13327.1875 861,13355.4316 876,13355.4316 L886,13355.4316 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M713,13016.502 L723,13016.502 C738,13016.502 738,13327.1875 753,13327.1875 L763,13327.1875 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M587,13496.6523 L597,13496.6523 C612,13496.6523 612,13016.502 627,13016.502 L637,13016.502 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="90" x="637" y="13789.0938"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="70" x="647" y="13812.6289">线程池分类</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="165" x="777" y="13563.1406"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="145" x="787" y="13586.6758">newFixedThreadPool</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="188" x="992" y="13478.4082"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="168" x="1002" y="13501.9434">可重用固定线程数的线程池</text><path d="M942,13581.3848 L952,13581.3848 C967,13581.3848 967,13496.6523 982,13496.6523 L992,13496.6523 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="992" y="13591.3848"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="1002" y="13614.9199">分析</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="289" x="1090" y="13534.8965"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="269" x="1100" y="13558.4316">corePoolSize 和 maximumPoolSize 一致</text><path d="M1040,13609.6289 L1050,13609.6289 C1065,13609.6289 1065,13553.1406 1080,13553.1406 L1090,13553.1406 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="286" x="1090" y="13591.3848"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="266" x="1100" y="13614.9199">使用 “无界” 队列，LinkedBlockingQueue</text><path d="M1040,13609.6289 L1050,13609.6289 C1065,13609.6289 1065,13609.6289 1080,13609.6289 L1090,13609.6289 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="487" x="1090" y="13647.873"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="467" x="1100" y="13671.4082">maximumPoolSize、keepAliveTime、RejectedExecutionHandler 无效</text><path d="M1040,13609.6289 L1050,13609.6289 C1065,13609.6289 1065,13666.1172 1080,13666.1172 L1090,13666.1172 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M942,13581.3848 L952,13581.3848 C967,13581.3848 967,13609.6289 982,13609.6289 L992,13609.6289 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M727,13807.3379 L737,13807.3379 C752,13807.3379 752,13581.3848 767,13581.3848 L777,13581.3848 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="178" x="777" y="13760.8496"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="158" x="787" y="13784.3848">newCachedThreadPool</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="239" x="1005" y="13704.3613"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="219" x="1015" y="13727.8965">使用单个 worker 线程的 Executor</text><path d="M955,13779.0938 L965,13779.0938 C980,13779.0938 980,13722.6055 995,13722.6055 L1005,13722.6055 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="1005" y="13789.0938"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="1015" y="13812.6289">分析</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="330" x="1103" y="13760.8496"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="310" x="1113" y="13784.3848">corePoolSize 和 maximumPoolSize 被设置为 1</text><path d="M1053,13807.3379 L1063,13807.3379 C1078,13807.3379 1078,13779.0938 1093,13779.0938 L1103,13779.0938 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="329" x="1103" y="13817.3379"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="309" x="1113" y="13840.873">使用 LinkedBlockingQueue 作为 workerQueue</text><path d="M1053,13807.3379 L1063,13807.3379 C1078,13807.3379 1078,13835.582 1093,13835.582 L1103,13835.582 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M955,13779.0938 L965,13779.0938 C980,13779.0938 980,13807.3379 995,13807.3379 L1005,13807.3379 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M727,13807.3379 L737,13807.3379 C752,13807.3379 752,13779.0938 767,13779.0938 L777,13779.0938 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="200" x="777" y="13986.8027"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="180" x="787" y="14010.3379">newSingleThreadExecutor</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="216" x="1027" y="13873.8262"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="196" x="1037" y="13897.3613">会根据需要创建新线程的线程池</text><path d="M977,14005.0469 L987,14005.0469 C1002,14005.0469 1002,13892.0703 1017,13892.0703 L1027,13892.0703 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="48" x="1027" y="14015.0469"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="28" x="1037" y="14038.582">分析</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="181" x="1125" y="13930.3145"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="161" x="1135" y="13953.8496">corePoolSize 被设置为 0</text><path d="M1075,14033.291 L1085,14033.291 C1100,14033.291 1100,13948.5586 1115,13948.5586 L1125,13948.5586 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="346" x="1125" y="13986.8027"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="326" x="1135" y="14010.3379">maximumPoolSize 被设置为 Integer.MAX_VALUE</text><path d="M1075,14033.291 L1085,14033.291 C1100,14033.291 1100,14005.0469 1115,14005.0469 L1125,14005.0469 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="284" x="1125" y="14043.291"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="264" x="1135" y="14066.8262">SynchronousQueue 作为 WorkerQueue</text><path d="M1075,14033.291 L1085,14033.291 C1100,14033.291 1100,14061.5352 1115,14061.5352 L1125,14061.5352 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="926" x="1125" y="14099.7793"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="906" x="1135" y="14123.3145">如果主线程提交任务的速度高于 maxiMumPool 中线程处理任务的速度时，CachedThreadPool 会不断创建心线程，可能会耗尽 CPU 和内存资源</text><path d="M1075,14033.291 L1085,14033.291 C1100,14033.291 1100,14118.0234 1115,14118.0234 L1125,14118.0234 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M977,14005.0469 L987,14005.0469 C1002,14005.0469 1002,14033.291 1017,14033.291 L1027,14033.291 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M727,13807.3379 L737,13807.3379 C752,13807.3379 752,14005.0469 767,14005.0469 L777,14005.0469 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M587,13496.6523 L597,13496.6523 C612,13496.6523 612,13807.3379 627,13807.3379 L637,13807.3379 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="637" y="14184.5117"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="647" y="14208.0469">任务提交</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="149" x="763" y="14156.2676"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="129" x="773" y="14179.8027">Executor.execute()</text><path d="M713,14202.7559 L723,14202.7559 C738,14202.7559 738,14174.5117 753,14174.5117 L763,14174.5117 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="190" x="763" y="14212.7559"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="170" x="773" y="14236.291">ExecutorService.submit()</text><path d="M713,14202.7559 L723,14202.7559 C738,14202.7559 738,14231 753,14231 L763,14231 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M587,13496.6523 L597,13496.6523 C612,13496.6523 612,14202.7559 627,14202.7559 L637,14202.7559 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="637" y="14269.2441"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="647" y="14292.7793">任务执行</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="763" y="14269.2441"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="773" y="14292.7793">执行流程</text><path d="M713,14287.4883 L723,14287.4883 C738,14287.4883 738,14287.4883 753,14287.4883 L763,14287.4883 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M587,13496.6523 L597,13496.6523 C612,13496.6523 612,14287.4883 627,14287.4883 L637,14287.4883 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="90" x="637" y="14325.7324"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="70" x="647" y="14349.2676">线程池调优</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="777" y="14325.7324"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="787" y="14349.2676">两种模型</text><path d="M727,14343.9766 L737,14343.9766 C752,14343.9766 752,14343.9766 767,14343.9766 L777,14343.9766 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M587,13496.6523 L597,13496.6523 C612,13496.6523 612,14343.9766 627,14343.9766 L637,14343.9766 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="90" x="637" y="14382.2207"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="70" x="647" y="14405.7559">线程池监控</text><path d="M587,13496.6523 L597,13496.6523 C612,13496.6523 612,14400.4648 627,14400.4648 L637,14400.4648 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M377,13553.1406 L387,13553.1406 C402,13553.1406 402,13496.6523 417,13496.6523 L427,13496.6523 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="231" x="427" y="14495.1973"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="211" x="437" y="14518.7324">ScheduledThreadPoolExecutor</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="206" x="708" y="14438.709"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="186" x="718" y="14462.2441">继承自 ThreadPoolExecutor</text><path d="M658,14513.4414 L668,14513.4414 C683,14513.4414 683,14456.9531 698,14456.9531 L708,14456.9531 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="272" x="708" y="14495.1973"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="252" x="718" y="14518.7324">给定延迟后执行任务，或者定期执行任务</text><path d="M658,14513.4414 L668,14513.4414 C683,14513.4414 683,14513.4414 698,14513.4414 L708,14513.4414 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="1147" x="708" y="14551.6855"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="1127" x="718" y="14575.2207">内部使用 DelayQueue 来实现，会把调度的任务放入 DelayQueue 中，DelayQueue 内部封装 PriorityQueue，这个 priorityQueue 会堆队列中的 ScheduledFutureTask 进行排序</text><path d="M658,14513.4414 L668,14513.4414 C683,14513.4414 683,14569.9297 698,14569.9297 L708,14569.9297 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M377,13553.1406 L387,13553.1406 C402,13553.1406 402,14513.4414 417,14513.4414 L427,14513.4414 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M246,13637.873 L256,13637.873 C271,13637.873 271,13553.1406 286,13553.1406 L296,13553.1406 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="65" x="296" y="14749.3945"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="45" x="306" y="14772.9297">Future</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="411" y="14608.1738"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="421" y="14631.709">异步计算</text><path d="M361,14767.6387 L371,14767.6387 C386,14767.6387 386,14626.418 401,14626.418 L411,14626.418 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="65" x="411" y="14721.1504"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="45" x="421" y="14744.6855">Future</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="76" x="526" y="14721.1504"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="56" x="536" y="14744.6855">提供操作</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="118" x="652" y="14664.6621"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="98" x="662" y="14688.1973">执行任务的取消</text><path d="M602,14739.3945 L612,14739.3945 C627,14739.3945 627,14682.9063 642,14682.9063 L652,14682.9063 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="132" x="652" y="14721.1504"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="112" x="662" y="14744.6855">查询任务是否完成</text><path d="M602,14739.3945 L612,14739.3945 C627,14739.3945 627,14739.3945 642,14739.3945 L652,14739.3945 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="146" x="652" y="14777.6387"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="126" x="662" y="14801.1738">获取任务的执行结果</text><path d="M602,14739.3945 L612,14739.3945 C627,14739.3945 627,14795.8828 642,14795.8828 L652,14795.8828 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M476,14739.3945 L486,14739.3945 C501,14739.3945 501,14739.3945 516,14739.3945 L526,14739.3945 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M361,14767.6387 L371,14767.6387 C386,14767.6387 386,14739.3945 401,14739.3945 L411,14739.3945 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="97" x="411" y="14862.3711"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="77" x="421" y="14885.9063">FutureTask</text><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="659" x="558" y="14834.127"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="639" x="568" y="14857.6621">实现 RunableFuture 接口，既可以作为 Runable 被执行，也可以作为 Future 得到 Callable 的放回置</text><path d="M508,14880.6152 L518,14880.6152 C533,14880.6152 533,14852.3711 548,14852.3711 L558,14852.3711 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><rect fill="#E3F2FD" height="36.4883" rx="12.5" ry="12.5" style="stroke:#424242;stroke-width:1.5;" width="141" x="558" y="14890.6152"/><text fill="#222222" font-family="&quot;'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace&quot;" font-size="14" lengthAdjust="spacing" textLength="121" x="568" y="14914.1504">内部基于 AQS 实现</text><path d="M508,14880.6152 L518,14880.6152 C533,14880.6152 533,14908.8594 548,14908.8594 L558,14908.8594 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M361,14767.6387 L371,14767.6387 C386,14767.6387 386,14880.6152 401,14880.6152 L411,14880.6152 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M246,13637.873 L256,13637.873 C271,13637.873 271,14767.6387 286,14767.6387 L296,14767.6387 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><path d="M117,7473.5518 L127,7473.5518 C142,7473.5518 142,13637.873 157,13637.873 L167,13637.873 " fill="none" style="stroke:#616161;stroke-width:1.0;"/><!--MD5=[2134ba0bcbf5e472b464f41df9e11466]
@startmindmap
!define DC_1 #BBBBBB
!define DC_2 #535353
!define DC_4 #2B2B2B
!define DC_3 #3C3F41
!define DC_5 #438AA3
!define DC_6 #5E8A4F
!define DC_7 #589DF6
!define DC_8 #FF6464

!define MD_RED_50 #FFEBEE
!define MD_RED_100 #FFCDD2
!define MD_RED_200 #EF9A9A
!define MD_RED_300 #E57373
!define MD_RED_400 #EF5350
!define MD_RED_500 #F44336
!define MD_RED_600 #E53935
!define MD_RED_700 #D32F2F
!define MD_RED_800 #C62828
!define MD_RED_900 #B71C1C
!define MD_RED_A100 #FF8A80
!define MD_RED_A200 #FF5252
!define MD_RED_A400 #FF1744
!define MD_RED_A700 #D50000
!define MD_PINK_50 #FCE4EC
!define MD_PINK_100 #F8BBD0
!define MD_PINK_200 #F48FB1
!define MD_PINK_300 #F06292
!define MD_PINK_400 #EC407A
!define MD_PINK_500 #E91E63
!define MD_PINK_600 #D81B60
!define MD_PINK_700 #C2185B
!define MD_PINK_800 #AD1457
!define MD_PINK_900 #880E4F
!define MD_PINK_A100 #FF80AB
!define MD_PINK_A200 #FF4081
!define MD_PINK_A400 #F50057
!define MD_PINK_A700 #C51162
!define MD_PURPLE_50 #F3E5F5
!define MD_PURPLE_100 #E1BEE7
!define MD_PURPLE_200 #CE93D8
!define MD_PURPLE_300 #BA68C8
!define MD_PURPLE_400 #AB47BC
!define MD_PURPLE_500 #9C27B0
!define MD_PURPLE_600 #8E24AA
!define MD_PURPLE_700 #7B1FA2
!define MD_PURPLE_800 #6A1B9A
!define MD_PURPLE_900 #4A148C
!define MD_PURPLE_A100 #EA80FC
!define MD_PURPLE_A200 #E040FB
!define MD_PURPLE_A400 #D500F9
!define MD_PURPLE_A700 #AA00FF
!define MD_DPURPLE_50 #EDE7F6
!define MD_DPURPLE_100 #D1C4E9
!define MD_DPURPLE_200 #B39DDB
!define MD_DPURPLE_300 #9575CD
!define MD_DPURPLE_400 #7E57C2
!define MD_DPURPLE_500 #673AB7
!define MD_DPURPLE_600 #5E35B1
!define MD_DPURPLE_700 #512DA8
!define MD_DPURPLE_800 #4527A0
!define MD_DPURPLE_900 #311B92
!define MD_DPURPLE_A100 #B388FF
!define MD_DPURPLE_A200 #7C4DFF
!define MD_DPURPLE_A400 #651FFF
!define MD_DPURPLE_A700 #6200EA
!define MD_INDIGO_50 #E8EAF6
!define MD_INDIGO_100 #C5CAE9
!define MD_INDIGO_200 #9FA8DA
!define MD_INDIGO_300 #7986CB
!define MD_INDIGO_400 #5C6BC0
!define MD_INDIGO_500 #3F51B5
!define MD_INDIGO_600 #3949AB
!define MD_INDIGO_700 #303F9F
!define MD_INDIGO_800 #283593
!define MD_INDIGO_900 #1A237E
!define MD_INDIGO_A100 #8C9EFF
!define MD_INDIGO_A200 #536DFE
!define MD_INDIGO_A400 #3D5AFE
!define MD_INDIGO_A700 #304FFE
!define MD_BLUE_50 #E3F2FD
!define MD_BLUE_100 #BBDEFB
!define MD_BLUE_200 #90CAF9
!define MD_BLUE_300 #64B5F6
!define MD_BLUE_400 #42A5F5
!define MD_BLUE_500 #2196F3
!define MD_BLUE_600 #1E88E5
!define MD_BLUE_700 #1976D2
!define MD_BLUE_800 #1565C0
!define MD_BLUE_900 #0D47A1
!define MD_BLUE_A100 #82B1FF
!define MD_BLUE_A200 #448AFF
!define MD_BLUE_A400 #2979FF
!define MD_BLUE_A700 #2962FF
!define MD_LBLUE_50 #E1F5FE
!define MD_LBLUE_100 #B3E5FC
!define MD_LBLUE_200 #81D4FA
!define MD_LBLUE_300 #4FC3F7
!define MD_LBLUE_400 #29B6F6
!define MD_LBLUE_500 #03A9F4
!define MD_LBLUE_600 #039BE5
!define MD_LBLUE_700 #0288D1
!define MD_LBLUE_800 #0277BD
!define MD_LBLUE_900 #01579B
!define MD_LBLUE_A100 #80D8FF
!define MD_LBLUE_A200 #40C4FF
!define MD_LBLUE_A400 #00B0FF
!define MD_LBLUE_A700 #0091EA
!define MD_CYAN_50 #E0F7FA
!define MD_CYAN_100 #B2EBF2
!define MD_CYAN_200 #80DEEA
!define MD_CYAN_300 #4DD0E1
!define MD_CYAN_400 #26C6DA
!define MD_CYAN_500 #00BCD4
!define MD_CYAN_600 #00ACC1
!define MD_CYAN_700 #0097A7
!define MD_CYAN_800 #00838F
!define MD_CYAN_900 #006064
!define MD_CYAN_A100 #84FFFF
!define MD_CYAN_A200 #18FFFF
!define MD_CYAN_A400 #00E5FF
!define MD_CYAN_A700 #00B8D4
!define MD_TEAL_50 #E0F2F1
!define MD_TEAL_100 #B2DFDB
!define MD_TEAL_200 #80CBC4
!define MD_TEAL_300 #4DB6AC
!define MD_TEAL_400 #26A69A
!define MD_TEAL_500 #009688
!define MD_TEAL_600 #00897B
!define MD_TEAL_700 #00796B
!define MD_TEAL_800 #00695C
!define MD_TEAL_900 #004D40
!define MD_TEAL_A100 #A7FFEB
!define MD_TEAL_A200 #64FFDA
!define MD_TEAL_A400 #1DE9B6
!define MD_TEAL_A700 #00BFA5
!define MD_GREEN_50 #E8F5E9
!define MD_GREEN_100 #C8E6C9
!define MD_GREEN_200 #A5D6A7
!define MD_GREEN_300 #81C784
!define MD_GREEN_400 #66BB6A
!define MD_GREEN_500 #4CAF50
!define MD_GREEN_600 #43A047
!define MD_GREEN_700 #388E3C
!define MD_GREEN_800 #2E7D32
!define MD_GREEN_900 #1B5E20
!define MD_GREEN_A100 #B9F6CA
!define MD_GREEN_A200 #69F0AE
!define MD_GREEN_A400 #00E676
!define MD_GREEN_A700 #00C853
!define MD_LGREEN_50 #F1F8E9
!define MD_LGREEN_100 #DCEDC8
!define MD_LGREEN_200 #C5E1A5
!define MD_LGREEN_300 #AED581
!define MD_LGREEN_400 #9CCC65
!define MD_LGREEN_500 #8BC34A
!define MD_LGREEN_600 #7CB342
!define MD_LGREEN_700 #689F38
!define MD_LGREEN_800 #558B2F
!define MD_LGREEN_900 #33691E
!define MD_LGREEN_A100 #CCFF90
!define MD_LGREEN_A200 #B2FF59
!define MD_LGREEN_A400 #76FF03
!define MD_LGREEN_A700 #64DD17
!define MD_LIME_50 #F9FBE7
!define MD_LIME_100 #F0F4C3
!define MD_LIME_200 #E6EE9C
!define MD_LIME_300 #DCE775
!define MD_LIME_400 #D4E157
!define MD_LIME_500 #CDDC39
!define MD_LIME_600 #C0CA33
!define MD_LIME_700 #AFB42B
!define MD_LIME_800 #9E9D24
!define MD_LIME_900 #827717
!define MD_LIME_A100 #F4FF81
!define MD_LIME_A200 #EEFF41
!define MD_LIME_A400 #C6FF00
!define MD_LIME_A700 #AEEA00
!define MD_YELLOW_50 #FFFDE7
!define MD_YELLOW_100 #FFF9C4
!define MD_YELLOW_200 #FFF59D
!define MD_YELLOW_300 #FFF176
!define MD_YELLOW_400 #FFEE58
!define MD_YELLOW_500 #FFEB3B
!define MD_YELLOW_600 #FDD835
!define MD_YELLOW_700 #FBC02D
!define MD_YELLOW_800 #F9A825
!define MD_YELLOW_900 #F57F17
!define MD_YELLOW_A100 #FFFF8D
!define MD_YELLOW_A200 #FFFF00
!define MD_YELLOW_A400 #FFEA00
!define MD_YELLOW_A700 #FFD600
!define MD_AMBER_50 #FFF8E1
!define MD_AMBER_100 #FFECB3
!define MD_AMBER_200 #FFE082
!define MD_AMBER_300 #FFD54F
!define MD_AMBER_400 #FFCA28
!define MD_AMBER_500 #FFC107
!define MD_AMBER_600 #FFB300
!define MD_AMBER_700 #FFA000
!define MD_AMBER_800 #FF8F00
!define MD_AMBER_900 #FF6F00
!define MD_AMBER_A100 #FFE57F
!define MD_AMBER_A200 #FFD740
!define MD_AMBER_A400 #FFC400
!define MD_AMBER_A700 #FFAB00
!define MD_ORANGE_50 #FFF3E0
!define MD_ORANGE_100 #FFE0B2
!define MD_ORANGE_200 #FFCC80
!define MD_ORANGE_300 #FFB74D
!define MD_ORANGE_400 #FFA726
!define MD_ORANGE_500 #FF9800
!define MD_ORANGE_600 #FB8C00
!define MD_ORANGE_700 #F57C00
!define MD_ORANGE_800 #EF6C00
!define MD_ORANGE_900 #E65100
!define MD_ORANGE_A100 #FFD180
!define MD_ORANGE_A200 #FFAB40
!define MD_ORANGE_A400 #FF9100
!define MD_ORANGE_A700 #FF6D00
!define MD_DORANGE_50 #FBE9E7
!define MD_DORANGE_100 #FFCCBC
!define MD_DORANGE_200 #FFAB91
!define MD_DORANGE_300 #FF8A65
!define MD_DORANGE_400 #FF7043
!define MD_DORANGE_500 #FF5722
!define MD_DORANGE_600 #F4511E
!define MD_DORANGE_700 #E64A19
!define MD_DORANGE_800 #D84315
!define MD_DORANGE_900 #BF360C
!define MD_DORANGE_A100 #FF9E80
!define MD_DORANGE_A200 #FF6E40
!define MD_DORANGE_A400 #FF3D00
!define MD_DORANGE_A700 #DD2C00
!define MD_BROWN_50 #EFEBE9
!define MD_BROWN_100 #D7CCC8
!define MD_BROWN_200 #BCAAA4
!define MD_BROWN_300 #A1887F
!define MD_BROWN_400 #8D6E63
!define MD_BROWN_500 #795548
!define MD_BROWN_600 #6D4C41
!define MD_BROWN_700 #5D4037
!define MD_BROWN_800 #4E342E
!define MD_BROWN_900 #3E2723
!define MD_GRAY_50 #FAFAFA
!define MD_GRAY_100 #F5F5F5
!define MD_GRAY_200 #EEEEEE
!define MD_GRAY_300 #E0E0E0
!define MD_GRAY_400 #BDBDBD
!define MD_GRAY_500 #9E9E9E
!define MD_GRAY_600 #757575
!define MD_GRAY_700 #616161
!define MD_GRAY_800 #424242
!define MD_GRAY_900 #212121
!define MD_BGRAY_50 #ECEFF1
!define MD_BGRAY_100 #CFD8DC
!define MD_BGRAY_200 #B0BEC5
!define MD_BGRAY_300 #90A4AE
!define MD_BGRAY_400 #78909C
!define MD_BGRAY_500 #607D8B
!define MD_BGRAY_600 #546E7A
!define MD_BGRAY_700 #455A64
!define MD_BGRAY_800 #37474F
!define MD_BGRAY_900 #263238
!define MD_BLACK #000000
!define MD_WHITE #FFFFFF
!define Black   #222222
!define MidnightBlue   #363D5D
!define Red     #F6363F
!define Pink    #F6216E
!define Magenta #A54FBD
!define Green   #37A77C
!define Yellow  #F97A00
!define Blue    #1E98F2
!define CYan    #25AFCA
!define AntiqueWhite   #FEF2DC
!define Grey #444444

!define NOTE_BG_COLOR MD_BGRAY_300
!define NOTE_BORDER_COLOR MD_BGRAY_300

!define NOTE_Q_BG_COLOR MD_YELLOW_800
!define NOTE_Q_BORDER_COLOR MD_YELLOW_800

!define EL_BG_COLOR_900 MD_BLUE_900
!define EL_BORDER_COLOR_900 MD_BLUE_900
!define EL_BG_COLOR_800 MD_BLUE_800
!define EL_BORDER_COLOR_800 MD_BLUE_800
!define EL_BG_COLOR_600 MD_BLUE_600
!define EL_BORDER_COLOR_600 MD_BLUE_600

!define EL_BG_COLOR_400 MD_BLUE_400
!define EL_BORDER_COLOR_400 MD_BLUE_400

!define EL_BG_COLOR_300 MD_BLUE_300
!define EL_BORDER_COLOR_300 MD_BLUE_300









skinparam wrapWidth 200
skinparam maxMessageSize 150
skinparam ComponentStyle uml2
skinparam Shadowing false

skinparam Default {
    FontName "'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace"
    FontColor Black
    FontSize  14
    FontStyle plain
    Shadowing false
    TextAlignment center
    BackgroundColor MD_BLUE_50
    BorderColor MD_GRAY_800
}

skinparam Note {
    BackgroundColor NOTE_BG_COLOR
    BorderColor NOTE_BORDER_COLOR
    BorderThickness 1
    FontColor White
    Shadowing false
    TextAlignment left
}

skinparam Note<<quit>> {

    BackgroundColor NOTE_Q_BG_COLOR
    BorderColor NOTE_Q_BORDER_COLOR
}

skinparam Sequence {
    ActorBorderThickness 1
    LifeLineBorderColor GREEN
    ParticipantBorderThickness 0
    Shadowing false


    GroupBorderThickness 1
    GroupBorderColor MD_BLUE_800
    GroupBackgroundColor MD_BLUE_100
}

skinparam Activity {

    StartColor Green
    EndColor Red
    AttributeFontColor white
    AttributeFontSize  15
    AttributeFontname  Droid Sans Mono

    BackgroundColor MD_BLUE_100
    BorderColor MD_BLUE_200
    BorderThickness 1

    ArrowThickness 1


    BarColor   MD_BLUE_900


    DiamondBackgroundColor   MD_ORANGE_100
    DiamondBorderColor    MD_ORANGE_200


}

skinparam Class {
    BackgroundColor MD_BLUE_50
    BorderColor MD_BLUE_300
    BorderThickness 1


    StereotypeFontColor DC_7
    StereotypeFontSize 14
}



skinparam Interface {
    BackgroundColor MD_BLUE_50
    BorderColor MD_GRAY_800
    FontSize 14


    StereotypeFontColor DC_7
    StereotypeFontSize 1
}



skinparam Participant {
    BackgroundColor EL_BG_COLOR_800
    BorderColor EL_BORDER_COLOR_800
    FontColor White
    Shadowing false
}

skinparam Actor {
    BackgroundColor EL_BG_COLOR_800
    BorderColor EL_BORDER_COLOR_800
    Shadowing false
}

skinparam UseCase {
    BackgroundColor EL_BG_COLOR_300
    BorderColor EL_BG_COLOR_300
    Shadowing false
    ArrowThickness 1
    ArrowColor EL_BORDER_COLOR_800

    ActorBackgroundColor EL_BG_COLOR_800
    ActorBorderColor MD_BLUE_900
    ActorShadowing false

}


skinparam State {
    FontSize           17

    AttributeFontSize  14

    BackgroundColor    MD_BLUE_100
    BorderColor        MD_BLUE_200
    StartColor Green
    EndColor Red
}

skinparam Partition {
    BorderColor MD_GRAY_800
    BorderStyle dashed

    BorderThickness 1
}

skinparam rectangle {
    StereotypeFontSize 12
    shadowing false
}

skinparam database {
    StereotypeFontSize 12
    shadowing false
}

skinparam Queue {
    BackgroundColor MD_BLUE_50
    BorderColor MD_GRAY_800
}
skinparam Agent {
    BackgroundColor MD_BLUE_50
    BorderColor MD_GRAY_800
}
skinparam Artifact {
    BackgroundColor MD_BLUE_50
    BorderColor MD_GRAY_800
}

skinparam Boundary {
    BackgroundColor MD_BLUE_50
    BorderColor MD_GRAY_800
}
skinparam Card {
    BackgroundColor MD_BLUE_50
    BorderColor MD_GRAY_800
}

skinparam Cloud {
    BackgroundColor MD_BLUE_50
    BorderColor MD_GRAY_800
}

skinparam Component {
    BackgroundColor MD_BLUE_50
    BorderColor MD_GRAY_800
}
skinparam Control {
    BackgroundColor MD_BLUE_50
    BorderColor MD_GRAY_800
}
skinparam Database {
    BackgroundColor MD_BLUE_50
    BorderColor MD_GRAY_800
}

skinparam Entity {
    BackgroundColor MD_BLUE_50
    BorderColor MD_GRAY_800
}
skinparam File {
    BackgroundColor MD_BLUE_50
    BorderColor MD_GRAY_800
}
skinparam Folder {
    BackgroundColor MD_BLUE_50
    BorderColor MD_GRAY_800

}
skinparam Frame {
    BackgroundColor MD_BLUE_50
    BorderColor MD_GRAY_800
}
skinparam Node {
    BackgroundColor MD_BLUE_50
    BorderColor MD_GRAY_800
}


skinparam Package {
    BackgroundColor MD_BLUE_50
    BorderColor MD_GRAY_800
}
skinparam Stack {
    BackgroundColor MD_BLUE_50
    BorderColor MD_GRAY_800
}

skinparam Rectangle {
    BackgroundColor MD_BLUE_50
    BorderColor MD_GRAY_800
}

skinparam Storage {
    BackgroundColor MD_BLUE_50
    BorderColor MD_GRAY_800
}

skinparam rectangle<<usercase>> {
    Shadowing false
    StereotypeFontSize 0
    FontColor MD_GRAY_800
    BorderColor MD_GRAY_800
    BorderStyle dashed
    BackgroundColor White
}



!define TECHN_FONT_SIZE 12

!define LAYOUT_TOP_DOWN top to bottom direction
!define LAYOUT_LEFT_RIGHT left to right direction

!definelong LAYOUT_AS_SKETCH
skinparam backgroundColor #EEEBDC
skinparam handwritten true
center footer <font color=red>Warning:</font> Created for discussion, needs to be validated
!enddefinelong


!define RED_ARROW skinparam ArrowColor Red
!define MEGENTA_ARROW skinparam ArrowColor Magenta
!define GREEN_ARROW skinparam ArrowColor MD_GREEN_200
!define GREY_ARROW skinparam ArrowColor DC_1
!define YELLOW_ARROW skinparam ArrowColor Yellow


!define Lay_D(e_from, e_to) e_from -[hidden]D- e_to
!define Lay_U(e_from, e_to) e_from -[hidden]U- e_to
!define Lay_R(e_from, e_to) e_from -[hidden]R- e_to
!define Lay_L(e_from, e_to) e_from -[hidden]L- e_to


!define UserCasePackage(e_alias, e_label) rectangle "==e_label" <<usercase>> as e_alias
!define UserCasePackage(e_alias, e_label, e_type) rectangle "==e_label\n<size:TECHN_FONT_SIZE>[e_type]</size>" <<usercase>> as e_alias

!define ELEMENT_FONT_COLOR MD_WHITE

!define PERSON_BG_COLOR MD_BLUE_800
!define PERSON_BORDER_COLOR MD_BLUE_900
!define EXTERNAL_PERSON_BG_COLOR MD_GRAY_700
!define EXTERNAL_PERSON_BORDER_COLOR MD_GRAY_800

!define SYSTEM_BG_COLOR MD_BLUE_700
!define SYSTEM_BORDER_COLOR MD_BLUE_800
!define EXTERNAL_SYSTEM_BG_COLOR MD_GRAY_600
!define EXTERNAL_SYSTEM_BORDER_COLOR MD_GRAY_700

!define DATABASE_BG_COLOR MD_BLUE_700
!define DATABASE_BORDER_COLOR MD_BLUE_800

!define ACTOR_BG_COLOR MD_BLUE_800
!define ACTOR_BORDER_COLOR MD_BLUE_900
!define INTERNAL_ACTOR_BG_COLOR MD_GRAY_700
!define INTERNAL_ACTOR_BORDER_COLOR MD_GRAY_800

!define CONTAINER_BG_COLOR MD_BLUE_600
!define CONTAINER_BORDER_COLOR MD_BLUE_600

!define COMPONENT_BG_COLOR MD_BLUE_200
!define COMPONENT_BORDER_COLOR MD_BLUE_300
!define COMPONENT_FONT_COLOR Black


!define TECHN_FONT_SIZE 12


skinparam rectangle {
    StereotypeFontSize 12
    shadowing false
}

skinparam database {
    StereotypeFontSize 12
    shadowing false
}

skinparam Arrow {
    Color MD_GRAY_700
    FontColor MD_GRAY_700
    FontSize 12
}

skinparam rectangle<<boundary>> {
    Shadowing false
    StereotypeFontSize 0
    FontColor MD_GRAY_800
    BorderColor MD_GRAY_800
    BorderStyle dashed
    BackgroundColor White
}




!define Boundary(e_alias, e_label) rectangle "==e_label" <<boundary>> as e_alias
!define Boundary(e_alias, e_label, e_type) rectangle "==e_label\n<size:TECHN_FONT_SIZE>[e_type]</size>" <<boundary>> as e_alias


!define Rel_(e_alias1, e_alias2, e_label, e_direction="") e_alias1 e_direction e_alias2 : "===e_label"
!define Rel_(e_alias1, e_alias2, e_label, e_techn, e_direction="") e_alias1 e_direction e_alias2 : "===e_label\n//<size:TECHN_FONT_SIZE>[e_techn]</size>//"

!define Rel(e_from,e_to, e_label) Rel_(e_from,e_to, e_label, "- ->")
!define Rel(e_from,e_to, e_label, e_techn) Rel_(e_from,e_to, e_label, e_techn, "- ->")

!define Rel_Back(e_to, e_from, e_label) Rel_(e_to, e_from, e_label, "<- -")
!define Rel_Back(e_to, e_from, e_label, e_techn) Rel_(e_to, e_from, e_label, e_techn, "<- -")

!define Rel_Neighbor(e_from,e_to, e_label) Rel_(e_from,e_to, e_label, "->")
!define Rel_Neighbor(e_from,e_to, e_label, e_techn) Rel_(e_from,e_to, e_label, e_techn, "->")

!define Rel_Back_Neighbor(e_to, e_from, e_label) Rel_(e_to, e_from, e_label, "<-")
!define Rel_Back_Neighbor(e_to, e_from, e_label, e_techn) Rel_(e_to, e_from, e_label, e_techn, "<-")

!define Rel_D(e_from,e_to, e_label) Rel_(e_from,e_to, e_label, "-DOWN->")
!define Rel_D(e_from,e_to, e_label, e_techn) Rel_(e_from,e_to, e_label, e_techn, "-DOWN->")
!define Rel_Down(e_from,e_to, e_label) Rel_D(e_from,e_to, e_label)
!define Rel_Down(e_from,e_to, e_label, e_techn) Rel_D(e_from,e_to, e_label, e_techn)

!define Rel_U(e_from,e_to, e_label) Rel_(e_from,e_to, e_label, "-UP->")
!define Rel_U(e_from,e_to, e_label, e_techn) Rel_(e_from,e_to, e_label, e_techn, "-UP->")
!define Rel_Up(e_from,e_to, e_label) Rel_U(e_from,e_to, e_label)
!define Rel_Up(e_from,e_to, e_label, e_techn) Rel_U(e_from,e_to, e_label, e_techn)

!define Rel_L(e_from,e_to, e_label) Rel_(e_from,e_to, e_label, "-LEFT->")
!define Rel_L(e_from,e_to, e_label, e_techn) Rel_(e_from,e_to, e_label, e_techn, "-LEFT->")
!define Rel_Left(e_from,e_to, e_label) Rel_L(e_from,e_to, e_label)
!define Rel_Left(e_from,e_to, e_label, e_techn) Rel_L(e_from,e_to, e_label, e_techn)

!define Rel_R(e_from,e_to, e_label) Rel_(e_from,e_to, e_label, "-RIGHT->")
!define Rel_R(e_from,e_to, e_label, e_techn) Rel_(e_from,e_to, e_label, e_techn, "-RIGHT->")
!define Rel_Right(e_from,e_to, e_label) Rel_R(e_from,e_to, e_label)
!define Rel_Right(e_from,e_to, e_label, e_techn) Rel_R(e_from,e_to, e_label, e_techn)



skinparam actor<<person>> {
  BorderColor ACTOR_BORDER_COLOR
  BackgroundColor ACTOR_BG_COLOR
}

skinparam actor<<internal_person>> {
  BorderColor INTERNAL_ACTOR_BORDER_COLOR
  BackgroundColor INTERNAL_ACTOR_BG_COLOR
}




skinparam rectangle<<person>> {
    StereotypeFontColor ELEMENT_FONT_COLOR
    FontColor ELEMENT_FONT_COLOR
    BackgroundColor PERSON_BG_COLOR
    BorderColor PERSON_BORDER_COLOR
}

skinparam rectangle<<external_person>> {
    StereotypeFontColor ELEMENT_FONT_COLOR
    FontColor ELEMENT_FONT_COLOR
    BackgroundColor EXTERNAL_PERSON_BG_COLOR
    BorderColor EXTERNAL_PERSON_BORDER_COLOR
}

skinparam rectangle<<system>> {
    StereotypeFontColor ELEMENT_FONT_COLOR
    FontColor ELEMENT_FONT_COLOR
    BackgroundColor SYSTEM_BG_COLOR
    BorderColor SYSTEM_BORDER_COLOR
}

skinparam rectangle<<external_system>> {
    StereotypeFontColor ELEMENT_FONT_COLOR
    FontColor ELEMENT_FONT_COLOR
    BackgroundColor EXTERNAL_SYSTEM_BG_COLOR
    BorderColor EXTERNAL_SYSTEM_BORDER_COLOR
}

skinparam database<<system>> {
    StereotypeFontColor ELEMENT_FONT_COLOR
    FontColor ELEMENT_FONT_COLOR
    BackgroundColor SYSTEM_BG_COLOR
    BorderColor SYSTEM_BORDER_COLOR
}

skinparam database<<external_system>> {
    StereotypeFontColor ELEMENT_FONT_COLOR
    FontColor ELEMENT_FONT_COLOR
    BackgroundColor EXTERNAL_SYSTEM_BG_COLOR
    BorderColor EXTERNAL_SYSTEM_BORDER_COLOR
}

!definelong LAYOUT_WITH_LEGEND_CN
hide stereotype
legend right
|=   颜色           |= 类型 |
|<PERSON_BG_COLOR>      | 用户 |
|<EXTERNAL_PERSON_BG_COLOR>      | 外部用户 |
|<SYSTEM_BG_COLOR>   | 系统 |
|<EXTERNAL_SYSTEM_BG_COLOR>      | 外部系统 |
endlegend
!enddefinelong

!definelong LAYOUT_WITH_LEGEND
hide stereotype
legend right
|=    color          |= Type |
|<PERSON_BG_COLOR>      | person |
|<EXTERNAL_PERSON_BG_COLOR>      | external person |
|<SYSTEM_BG_COLOR>   | system |
|<EXTERNAL_SYSTEM_BG_COLOR>      | external system |
endlegend
!enddefinelong


!define Actor(e_alias, e_label) actor "==e_label" <<person>> as e_alias
!define Actor(e_alias, e_label, e_descr) actor "==e_label\n\n e_descr" <<person>> as e_alias

!define Actor_Ext(e_alias, e_label) actor "==e_label" <<internal_person>> as e_alias
!define Actor_Ext(e_alias, e_label, e_descr) actor "==e_label\n\n e_descr" <<internal_person>> as e_alias


!define Person(e_alias, e_label) rectangle "==e_label" <<person>> as e_alias
!define Person(e_alias, e_label, e_descr) rectangle "==e_label\n\n e_descr" <<person>> as e_alias

!define Person_Ext(e_alias, e_label) rectangle "==e_label" <<external_person>> as e_alias
!define Person_Ext(e_alias, e_label, e_descr) rectangle "==e_label\n\n e_descr" <<external_person>> as e_alias

!define System(e_alias, e_label) rectangle "==e_label" <<system>> as e_alias
!define System(e_alias, e_label, e_descr) rectangle "==e_label\n\n e_descr" <<system>> as e_alias

!define System_Ext(e_alias, e_label) rectangle "==e_label" <<external_system>> as e_alias
!define System_Ext(e_alias, e_label, e_descr) rectangle "==e_label\n\n e_descr" <<external_system>> as e_alias

!define SystemDb(e_alias, e_label) database "==e_label" <<system>> as e_alias
!define SystemDb(e_alias, e_label, e_descr) database "==e_label\n\n e_descr" <<system>> as e_alias

!define SystemDb_Ext(e_alias, e_label) database "==e_label" <<external_system>> as e_alias
!define SystemDb_Ext(e_alias, e_label, e_descr) database "==e_label\n\n e_descr" <<external_system>> as e_alias


!define Enterprise_Boundary(e_alias, e_label) Boundary(e_alias, e_label, "Enterprise")
!define System_Boundary(e_alias, e_label) Boundary(e_alias, e_label, "System")




skinparam rectangle<<container>> {
    StereotypeFontColor ELEMENT_FONT_COLOR
    FontColor ELEMENT_FONT_COLOR
    BackgroundColor CONTAINER_BG_COLOR
    BorderColor CONTAINER_BORDER_COLOR
}

skinparam database<<container>> {
    StereotypeFontColor ELEMENT_FONT_COLOR
    FontColor ELEMENT_FONT_COLOR
    BackgroundColor CONTAINER_BG_COLOR
    BorderColor CONTAINER_BORDER_COLOR
}

!definelong LAYOUT_WITH_LEGEND_CN
hide stereotype
legend right
|=    颜色          |= 类型 |
|<PERSON_BG_COLOR>      | 用户 |
|<EXTERNAL_PERSON_BG_COLOR>      | 外部用户 |
|<SYSTEM_BG_COLOR>   | 系统 |
|<EXTERNAL_SYSTEM_BG_COLOR>      | 外部系统 |
|<CONTAINER_BG_COLOR>   | 容器 |
endlegend
!enddefinelong

!definelong LAYOUT_WITH_LEGEND
hide stereotype
legend right
|=              |= Type |
|<PERSON_BG_COLOR>      | person |
|<EXTERNAL_PERSON_BG_COLOR>      | external person |
|<SYSTEM_BG_COLOR>   | system |
|<EXTERNAL_SYSTEM_BG_COLOR>      | external system |
|<CONTAINER_BG_COLOR>   | container |
endlegend
!enddefinelong


!define Container(e_alias, e_label, e_techn) rectangle "==e_label\n//<size:TECHN_FONT_SIZE>[e_techn]</size>//" <<container>> as e_alias
!define Container(e_alias, e_label, e_techn, e_descr) rectangle "==e_label\n//<size:TECHN_FONT_SIZE>[e_techn]</size>//\n\n e_descr" <<container>> as e_alias

!define ContainerDb(e_alias, e_label, e_techn) database "==e_label\n//<size:TECHN_FONT_SIZE>[e_techn]</size>//" <<container>> as e_alias
!define ContainerDb(e_alias, e_label, e_techn, e_descr) database "==e_label\n//<size:TECHN_FONT_SIZE>[e_techn]</size>//\n\n e_descr" <<container>> as e_alias


!define Container_Boundary(e_alias, e_label) Boundary(e_alias, e_label, "Container")



skinparam rectangle<<component>> {
    StereotypeFontColor ELEMENT_FONT_COLOR
    FontColor COMPONENT_FONT_COLOR
    BackgroundColor COMPONENT_BG_COLOR
    BorderColor COMPONENT_BORDER_COLOR
}

skinparam database<<component>> {
    StereotypeFontColor ELEMENT_FONT_COLOR
    FontColor COMPONENT_FONT_COLOR
    BackgroundColor COMPONENT_BG_COLOR
    BorderColor COMPONENT_BORDER_COLOR
}


!definelong LAYOUT_WITH_LEGEND_CN
hide stereotype
legend right
|=              |= Type |
|<PERSON_BG_COLOR>      | 用户 |
|<EXTERNAL_PERSON_BG_COLOR>      | 外部用户 |
|<SYSTEM_BG_COLOR>   | 系统 |
|<EXTERNAL_SYSTEM_BG_COLOR>      | 外部系统 |
|<CONTAINER_BG_COLOR>   | 容器 |
|<COMPONENT_BG_COLOR>   | 组件 |
endlegend
!enddefinelong


!definelong LAYOUT_WITH_LEGEND
hide stereotype
legend right
|=              |= Type |
|<PERSON_BG_COLOR>      | person |
|<EXTERNAL_PERSON_BG_COLOR>      | external person |
|<SYSTEM_BG_COLOR>   | system |
|<EXTERNAL_SYSTEM_BG_COLOR>      | external system |
|<CONTAINER_BG_COLOR>   | container |
|<COMPONENT_BG_COLOR>   | component |
endlegend
!enddefinelong


!define Component(e_alias, e_label, e_techn) rectangle "==e_label\n//<size:TECHN_FONT_SIZE>[e_techn]</size>//" <<component>> as e_alias
!define Component(e_alias, e_label, e_techn, e_descr) rectangle "==e_label\n//<size:TECHN_FONT_SIZE>[e_techn]</size>//\n\n e_descr" <<component>> as e_alias

!define ComponentDb(e_alias, e_label, e_techn) database "==e_label\n//<size:TECHN_FONT_SIZE>[e_techn]</size>//" <<component>> as e_alias
!define ComponentDb(e_alias, e_label, e_techn, e_descr) database "==e_label\n//<size:TECHN_FONT_SIZE>[e_techn]</size>//\n\n e_descr" <<component>> as e_alias


!define CLASS_LINE_FONT_SIZE 12

!define Link_(e_alias1, e_alias2, e_label, e_direction="") e_alias1 e_direction e_alias2 : "e_label"
!define Link_(e_alias1, e_alias2, e_label, e_techn, e_direction="") e_alias1 e_direction e_alias2 : "e_label\n//<size:TECHN_FONT_SIZE>[e_techn]</size>//"

!define Link(e_from,e_to, e_label) Link_(e_from,e_to, e_label, "- ->")
!define Link(e_from,e_to, e_label, e_techn) Link_(e_from,e_to, e_label, e_techn, "- ->")

!define Generalize(e_from,e_to, e_label) Link_(e_from,e_to, e_label, "- -|>")
!define Generalize(e_from,e_to, e_label, e_techn) Link_(e_from,e_to, e_label, e_techn, "- -|>")
!define GeneralizeBack(e_from,e_to, e_label) Link_(e_from,e_to, e_label, "<|- -")
!define GeneralizeBack(e_from,e_to, e_label, e_techn) Link_(e_from,e_to, e_label, e_techn, "<|- -")




!define Realize(e_from,e_to, e_label) Link_(e_from,e_to, e_label, "..|>")
!define Realize(e_from,e_to, e_label, e_techn) Link_(e_from,e_to, e_label, e_techn, "..|>")
!define RealizeBack(e_from,e_to, e_label) Link_(e_from,e_to, e_label, "<|..")
!define RealizeBack(e_from,e_to, e_label, e_techn) Link_(e_from,e_to, e_label, e_techn, "<|..")


!define Aggregation(e_from,e_to, e_label) Link_(e_from,e_to, e_label, "- -o")
!define Aggregation(e_from,e_to, e_label, e_techn) Link_(e_from,e_to, e_label, e_techn, "- -o")
!define AggregationBack(e_from,e_to, e_label) Link_(e_from,e_to, e_label, "o- -")
!define AggregationBack(e_from,e_to, e_label, e_techn) Link_(e_from,e_to, e_label, e_techn, "o- -")



!define Composition(e_from,e_to, e_label) Link_(e_from,e_to, e_label, "- -*")
!define Composition(e_from,e_to, e_label, e_techn) Link_(e_from,e_to, e_label, e_techn, "- -*")
!define CompositionBack(e_from,e_to, e_label) Link_(e_from,e_to, e_label, "*- -")
!define CompositionBack(e_from,e_to, e_label, e_techn) Link_(e_from,e_to, e_label, e_techn, "*- -")




!define Dependency(e_from,e_to, e_label) Link_(e_from,e_to, e_label, "..>")
!define Dependency(e_from,e_to, e_label, e_techn) Link_(e_from,e_to, e_label, e_techn, "..>")
!define DependencyBack(e_from,e_to, e_label) Link_(e_from,e_to, e_label, "<..")
!define DependencyBack(e_from,e_to, e_label, e_techn) Link_(e_from,e_to, e_label, e_techn, "<..")


!define Association(e_from,e_to, e_label) Link_(e_from,e_to, e_label, "- -")
!define Association(e_from,e_to, e_label, e_techn) Link_(e_from,e_to, e_label, e_techn, "- -")
* Java 并发体系

** 1. Java 内存模型（JMM）



*** 线程通信机制
**** 内存共享
***** Java 采用
**** 消息传递

*** 内存模型
**** 重排序
***** 为了程序的性能，处理器、编译器都会对程序进行重排序处理
***** 条件
****** 在单线程环境不能改变程序运行的结果
****** 存在数据依赖关系的不允许重排序
***** 问题
****** 重排序在多线程环境下可能会导致数据不安全

**** 顺序一致性
***** 多线程环境下的理论参考模型
***** 为程序提供了极强的内存可见性保证
***** 特性
****** 一个线程中的所有操作必须按照程序的顺序来致性
****** 所有的线程都只能看到一个单一的操作执行顺序，不管程序是否同步
****** 每个操作都必须原子执行并且对所有线程可见


**** happens-before
***** JVM 中最核心的理论，保证内存可见性
***** JVM 中，如果一个操作的执行结果需要对另一个操作可见，那么这两个操作之间必须存在 happens-before 存在数据依赖关系的不允许重排序
***** 理论
****** 如果一个操作 happens-before 另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作顺序排在第二个操作之前
****** 两个操作之前存在 happens-befoe 关系，并不意味着一定要按照 happens-before 原则指定的顺序来执行，如果，重排序之后的运行结果和 happens-before 运行结果相同，那么这种重排序不非法

**** as-if-serial
***** 所有的操作都可以为了优化而被重排序，但是你必须要保证重排序之后执行的结果不能被改变

*** synchronized
**** 同步、重量级锁
**** 原理
***** synchronized 可以保证方法或者代码块在运行市，同一时刻只有一个方法可以进入临界区，同时，它还可以保证共享变量的内存可见性
**** 锁对象
***** 普通同步方法，锁是当前实例对象
***** 静态同步方法，锁是当前类的 class 对象
***** 同步方法块，锁是括号里的对象
**** 实现机制
***** Java 对象头
****** synchronized 的锁就是保存在Java 对象头中的
****** 包括两部分数据
******* Mark Word(标记字段)
******** Mark Word 被设计成一个非固定的数据结果以便在极小的空间内存储尽量多的数据，它会根据对象的状态复用自己的存储空间
******** 包括
********* 哈希码（HashCode）、GC 分代年龄、锁状态标记、线程持有锁、偏向锁线程Id、偏向时间戳
******* Klass Pointer (类型指针)

***** monitor
****** owner
******* 初始时为 Null 表示当前没有任何线程拥有该 monitor record，当线程成功拥有该锁后保存线程唯一表示，当锁释放时又设置为 Null


**** 锁优化
***** 自旋锁
****** 该线程的等待一段时间，不会被立刻挂起，看持有锁的线程是否会很快释放锁（循环方式）
****** 自旋次数较难控制（-XX:preBlockSpin）
****** 存在理论：线程的频繁挂起、唤醒负担较重， 可以认为每个线程占用锁的时间很短，线程挂起再唤醒得不偿失
****** 缺点
******* 自选次数无法确定
***** 适应性自旋锁
****** 自旋次数不再是确定的，它是由前一次在同一个锁上的自选时间及锁的拥有者的状态来决定
****** 自选成功，则可以增加自旋次数，如果获取锁经常失败，那么自旋次数会减少
***** 锁消除
****** 若不存在数据竞争的情况，JVM会消除锁机制
****** 判断依据
******* 变量逃逸
***** 锁粗化
****** 将多个连续的加锁、解锁操作连接在一起，扩展成一个范围更大的锁。例如 for 循环内部获取锁
***** 轻量级锁
****** 在没有多线程的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗
****** 通过 CAS 来获取锁和释放锁
****** 性能依据
******* 对于绝大部分的锁，在整个生命周期内都是不会存在竞争的
****** 缺点
******* 在多线程情况下，其运行效率比重量级锁还会慢
***** 偏向锁线程
****** 为了在无多线程竞争的情况下尽量较少不必要的轻量级锁的执行路径
****** 主要尽可能避免不必需要的 CAS 操作，如果竞争锁失败，则升级为轻量级锁


*** volatile
**** 特性
***** volatile 可见性：对于 volatile 的读，总可以看到对这个变量最终的写
***** volatile 原子性：volatile 对单个读/写具有原子性（32位Long、Double），但是符合操作除外，例如 i++
**** 实现机制
***** 内存屏障
**** 内存语义
***** 当写一个 volatile 变量时，JMM 会把该线程对应的本地内存中的共享变量值立即刷新到主内存中
***** 当读一个 volatile 变量时，JMM 会把该线程对应的本地内存设置为无效，直接从主内存中读取共享变量
**** 操作系统语义
***** 主存、高速缓存（线程私有）缓存一致
***** 解决方案
****** 通过在总线加 Lock 锁的方式
****** 通过缓存一致性协议（MESI）
**** 内存模型
***** 重排序
***** happens-before




*** dcl()
**** 单例模式
**** DCL
***** 重排序
***** happens-before
**** 解决方案
***** volatile 方案
****** 禁止重排序
***** 基于类初始化的解决方案
****** 利用 ClassLoader 的机制来保证初始化 instance 时就只有一个线程，JVM 在类的初始化阶段会获得一个锁，这个锁可以同步多个线程对同一个类的初始话


** 2. Java 内存模型（JMM）
*** AQS
**** AbstractQueuedSynchronizer，同步器，实现 JUC 核心基础组件
**** 解决了子类实现同步器时涉及的大量细节问题，例如获取同步状态、FIFO同步队列
**** 采用模板模式，AQS 实现了大量通用方法，子类通过继承方式实现其抽象方法来管理同步状态
**** CLH 同步队列
***** FIFO 双向队列，AQS 依赖它来解决同步状态的管理问题
***** 首节点唤醒，等待队列加入到 CLH 同步队列的尾部
**** 同步状态获取与释放
***** 独占式
****** 获取锁
******* 获取同步状态：acquire
******* 响应中断：acquireInterruptibly
******* 超时获取：tryAcquireNanos
****** 释放锁
******* release
***** 共享式
****** 获取锁
******* acquireShared
****** 释放锁
******* releaseShared
**** 线程阻塞与唤醒
***** 当有线程获取锁了，其他再次获取时需要阻塞，当线程释放锁后，AQS负责唤醒线程
***** LockSupport
****** 是用来创建锁和其他同步类的基本线程阻塞原语
****** 每个使用 LockSupport 的线程都会与一个许可关联，如果该许可可用，并且可在进程中使用，则调用 park() 将会立即放回，否则可能阻塞，如果许可尚不可用，则可以调用 unpark 使其可用
****** park()、unPark()
*** CAS
**** Compare And Swap，整个 JUC 体系最核心、最基础理论
**** 内存值 V 、旧的预期值A、要更新的值 B 、当且仅当内存值 V 的值等于旧的预期值 A 时才会将内存之 V 的值修改为 B，否则什么都不干
**** native 中存在四个参数
**** 缺陷
***** 循环时间长
***** 只能保证一个共享变量原子操作
***** ABA 问题
****** 解决方案
******* 版本号
******* AtomicStampedReference



** 3. 锁
*** ReentrantLock
**** 可重入锁，是一种递归无阻塞的同步机制
**** 比 synchronized 更强大、灵活的锁机制，可以减少死锁发生的概率
**** 分为公平锁、非公平锁
**** 底层采用 CAS 实现，通过内部的 Sync 继承 AQS
*** ReentrantReadWriteLock
**** 读写锁，两把锁
***** 共享锁：读锁
***** 排他锁：写锁
**** 锁降级：遵循获取写锁、获取读锁在释放写锁的次序，写锁能够降级成为读锁
*** Condition
**** Lock 提供条件 Condition，对线程的等待、唤醒操作更加详细和灵活
**** 内部维护一个 Condition 队列，当前线程调用 await() 方法，将会以当前线程构成一个节点（Node），并将接待你加入到该队列的尾部

** 4. 并发工具类
*** CyclicBarrier
**** 它允许一组线程互相等待，直到到达某个公共屏障点（common barrier point）
**** 通俗讲：让一组线程达到一个屏障时被阻塞，知道最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会干活
**** 底层采用 ReentrantLock + Condition 实现
**** 应用场景
***** 多线程合并的操作结果，用于多线程计算数据，最后合并计算结果的应用场景
*** CountDownLatch
**** 在完成一组正在其他线程中执行的操作值钱，它允许调用一个或多个线程一直等待
**** 用给定的计数器 初始化 CountDownLatch，由于调用 countDown() 放啊发，所以在技术其到达零之前，await() 方法会一直受阻塞。\n 之后，会释放所有等待的线程，await 的所有后续调用都将立即返回。这种现象只出现一次 - - 计数器无法被重置。如果需要被重新技术，请考虑 CyclicBarrier
**** 与 CyclicBarrier 的区别
***** CountDownLatch 的作用是允许 1 或者 N 个线程等待其他线程完成执行；而 CyclicBarrier 则是允许 N 个线程相互等待
***** CountDownLatch 的计数器无法被重置；CyclicBarrier 的计数器可以被重置后使用，因此它被称为是循环的 barrier
**** 内部采用共享锁来实现
*** Semaphore
**** 信号量
***** 一个控制访问多个共享资源的计数器
**** 从概念上来讲，信号量维护了一个许可集。如果有必要，在许可可用前会阻塞每一个 acquire()，然后再获得许可。每一个 release() 添加一个许可，从而可能释放一个正在阻塞的获取者。\n但是，不使用实际的许可对象，Samphore 只对可用许可的号码进行技术，并采取相应的行动
**** 信号量 Samphore 是一个非负整数（ >=1 ）。当一个线程想要访问某个共享资源是，它必须先获取 Semaphore ，当 Semaphore > 0 时，\n 获取该资源并使 Semaphore -1。如果 Semaphore = 0，则表示全部的共享资源已经被其他线程全部占用，线程必须等待其他线程释放资源。当线程释放资源时，Semaphore +1
**** 应用场景
***** 通常用于限制可以访问某些资源（物理或逻辑的）线程数目
**** 内部采用共享锁实现
*** Exchanger
**** 可以在对中对元素进行配对和交换的线程的同步点
**** 允许在并发任务直中交换数据，具体来说，Exchanger 类允许在两个线程之间定义同步点。\n当两个线程都到到同步点时，他们交换数据结构，因此第一个线程的数据结构进入到第二个线程的数据结构中，第二个线程的数据结构进入到第一个线程中



** 5. 其他
*** ThreadLocal
**** 一种解决多线程环境下成员变量的问题的方案，但是与线程同步无关。\n其思路是为每一个线程创建一个单独的变量副本，从而每个线程都可以独立的改变自己所拥有的变量副本，而不会改变其他线程所对应的副本
**** ThreadLocal 不是用于解决共享变量的问题id额，也不是为了协调线程同步而存在，而是为了方便每个线程处理自己的状态而引入的一个机制
**** 四个方法
***** get(): 返回此线程局部变量的当前副本中的值
***** initiaValue(): 返回此线程局部变量的当前线程的“初始值”
***** remove() ： 移除此线程局部变量当前线程的值
***** set(T value) ：将此线程局部变量的当前线程副本中的值设置为指定值
**** ThreadLocalMap
***** 实现线程隔离机制的关键
***** 每个 Thread 内部都有一个 Threadlocal.ThreadLocalMap 类型中的成员，该成员用来存储实际的 ThreadLocal 变量副本
***** 提供了一种用键值对方式存储每一个线程的变量副本的方法，key 为当前 ThreadLocal 对象，value 则是对应线程的变量副本
**** 注意点
***** ThreadLocal 实例本身是不存储值，它只是提供了一个在当前线程中找到副本值的 key
***** 是 ThreadLocal 包含在 Thread 中，而不是 Thread 包含在 ThreadLocal 中
**** 内存泄漏问题
***** ThreadlocalMap
****** key 弱引用，value 强引用，无法回收
***** 显示调用 remove()
*** Fork/Join
**** 一个用于并行执行任务的框架，是一个把大任务分割成若干个小人物，最终汇总每个小任务结果后得到大人物结果的框架
**** 核心思想
***** “分治”
***** fork 分级任务，join 收集数据
**** 工作窃取
***** 某个线程从其他队列里窃取任务来执行
***** 执行快的线程帮助执行慢的线程执行任务，提升整体任务效率
***** 队列要采用双向队列
**** 核心类
***** ForkJoinPool
****** 执行任务的线程池
***** ForkJoinTask
****** 表示任务，用于 ForkJoinPool 的任务抽象
***** ForkJoinWorkerThread
****** 执行任务的工作线程



** 6. Java 并发集合
*** ConcurrentHashMap
**** CAS + Synchronized 来保证并发更新的安全，底层采用 数组 + 链表/红黑树 的存储结构
**** 重要内部类
***** Node
****** key-value键值对
***** TreeNode
****** 红黑树节点
***** TreeBin
****** 就相当于一个红黑树，其构造方法其实就是构造红黑树的过程
***** ForwardingNode
****** 辅助节点，用于 ConcurrentHashMap 扩容操作
****** sizeCtl
******* 控制标识符，用来控制 table 初始化和扩容操作的
******* 含义
******** 负数代表正在进行初始化或扩容操作
******** -1 代表初始化
******** -N 表示有 N-1 个线程正在进行扩容操作
******** 正数或零代表 hash 表还没有被初始化，这个数值表示初始化或进行下一次扩容的大小
**** 重要操作
***** initTable
****** ConcurrentHashMap 初始化方法
****** 只能由一个线程参与初始化过程，其他线程必须挂起
****** 构造函数不做初始化过程，初始化真正的是 put 操作中出发
****** 步骤
******* sizeCtl < 0 表示正在进行初始化，线程挂起
******* 线程获取初始化资格（CAS(sizeCtl, sc, -1)）进行初始化过程
******* 初始化步骤完成以后，设置 sizeCtl = 0.75*n (下一次扩容的阈值)，表示下一次扩容的大小
***** put
****** 核心思想
******* 根据 hash 值计算节点插入在 table 的位置，如果该位置为空，则直接插入，否则插入到链表或者树中
******* 真是情况较为复杂
****** 步骤
******* table 为 null, 线程进入初始化步骤，如果有其他线程正在进行初始化，该线程挂起
******* 如果插入的当前 i 位置为 null，说明该位置是第一次插入，利用 CAS 插入节点即可，插入成功，则调用 addCount 判断是否需要扩容。若插入失败，则继续匹配（自旋）
******* 若该节点的 hash == MOVED(-1) ，表示有线程正在进行扩容，则进入扩容进程中
******* 其余情况就是按照链表或者红黑树结构插入节点，但是这个过程需要加锁（Synchronized）
***** get
****** 步骤
******* table == null; return null;
******* 从 链表/红黑树 节点获取
***** 扩容
****** 多线程扩容
****** 步骤
******* 构建一个 nextTable，其大小为原来的两倍，这个步骤是在单线程环境下完成的
******* 将原来 table 里边的内容复制到 nextTable 中，这个步骤是允许多线程操作
***** 链表转化为红黑树过程
****** 所在链表的元素个数达到了阈值 8 ，则将链表转换为红黑树
****** 红黑树算法
**** 1.7 和 1.8 的区别

*** ConcurrentLinkedQueue
**** 基于链接节点的无边界的线程安全队列，采用 FIFO 原则对元素进行排序，内部采用 CAS 算法
**** 不变性
***** 在入队的最后一个元素的 next 为 null
***** 队列中所有未删除的节点的 item 都不能为 null，且都能从 head 节点遍历到
***** 对于要删除的节点，不是直接将其设置为 null，而是将其 item 值设置为 null，（迭代器会跳过 item 为 null 的节点）
***** 允许 head 和 tail 更新之后。这是什么意思呢？意思是说 head、tail 不总只想第一个元素和最后一个元素（后面阐述）
**** head 的不变性和可变性
**** tail 的不变性和可变性
**** 精妙之处：利用 CAS 来完成数据操作，同时允许队列的不一致性，弱一致性表现淋漓尽致
*** ConcurrentSkipListMap
**** 第三种 key-value 数据结构：SkipList( 跳表 )
**** skipList
***** 平衡二叉树
***** SkipList 让已排序的数据分布在多层链表中，以 0-1 随机数决定一个数据的向上攀升与否，通过“空间来换取时间”的一个算法，\n 在每个节点中增加了向前的指针，在插入、删除、查找是可以忽略一些不可能涉及的结点，从而提高了效率
***** 特性
****** 由很多层结构组成，level 是通过一定的概率随机产生的
****** 每一层都是一个有序的列表，默认是升序，也可以根据创建映射所提供的 Comparator 进行排序，具体取决于使用的构造方法
****** 最底层（Level 1）的链表所包含所有元素
****** 如果一个元素出现在 Level i 的链表中，则它在 Level i 之下的链表也都会出
****** 每个节点都包含两个指针，一个指向同一个链表中的下一个元素，一个指向下面一层的元素
***** 查找、删除、添加
*** ConcurrentSkipListSet



** 7. Atomic
*** 基本类型类
**** 用于通过原子的方式更新基本类型
**** AtomicBoolean
***** 原子更新布尔类型
**** AtomicInteger
***** 原子更新整形
**** AtomicLong
***** 原子更新长整型
*** 数组
**** 通过原子的方式更新数组里的某个元素
**** AtomicIntegerArray
***** 原子更新整型数组里的元素
**** AtomicLongArray
***** 原子更新长整型数组里的元素
**** AtomicReferenceArray
***** 原子更新引用类型数组里的元素
*** 引用类型
**** 如果要原子的更新多个变量，就需要使用这个原子更新引用类型提供的类
**** AtomicReference
***** 原子更新引用类型
**** AtomicReferenceFieldUpdater
***** 原子更新引用类型里的字段
**** AtomicMarkableReference
***** 原子更新带有白哦极为的引用类型
*** 字段类
**** 如果我们只需要某个类里的某个字段，那么就需要使用原子更新字段类
**** AtomicIntegerFieldUpdater
***** 原子更新整型的字段的更新器
**** AtomicLongFieldUpdater
***** 原子更新长整型字段的更新器
**** AtomicStampedReference
***** 原子更新带有版本号的引用类型


** 8. 阻塞队列
*** ArrayBlockingQueue
**** 一个由数组实现的 FIFO 有界阻塞队列
**** ArrayBlockingQueue 有界且固定，在构造函数时确认大小，确认后不支持改变
**** 在多线程环境下不保证 “公平性”
**** 实现
***** ReentrantLock
***** Condition
*** LinkedBlockingQueue
**** 基于链接、无界的 FIFO 阻塞队列
**** 默认情况下元素采用自然顺序升序排序，可以通过指定 Comparator 来对元素进行排序
**** 二叉堆
***** 分类
***** 最大堆
****** 父节点的键值总是大于或等于任何一个子节点的键值
***** 最小堆
****** 父节点的键值总是小于或等于任何一个子节点的键值
***** 添加操作则是不断 “上冒”，而删除操作则是不断 “下掉”
**** 实现
***** ReentrantLock + Condition
***** 二叉堆
*** DelayQueue
**** 支持延时获取元素的无界阻塞队列
**** 应用
***** 缓存：清掉缓存中超时的缓存数据
***** 任务超时数据
**** 实现
***** ReentrantLock + Condition
***** 根据 Delay 时间排序的优先级队列：PriorityQueue
**** Delayed 接口
***** 用来标记那些应该在给定延迟时间之后执行的对象
***** 该接口要求实现它的实现类必须定义一个 compareTo 方法，该方法提供给此接口的 getDelay 方法一致的排序
*** SynchronousQueue
**** 一个没有容量的阻塞队列
**** 应用
***** 交换工作，生产者的线程和消费者的线程同步以传递某些信息、事件或者任务
**** 难搞懂，与 Exchanger 有一拼
*** LinkedTransferQueue
**** 链表组成的无界阻塞队列
**** 相当于， ConcurrentLinkedQueue、SynchronousQueue(公平模式下)、无界的 LinkedBlockingQueues 等的超集
**** 预占模式
***** 有就直接拿走，没有就占着这个位置直到拿到或者超时或者中断
*** LinkedBlockingDeque
**** 由链表组成的双向阻塞队列
**** 容量可选，在初始化时可以设置容量防止其过度膨胀，如果不设置，默认容量大小为 Integer.MAX_VALUE
**** 运用
***** “工作窃取” 模式


** 9. 线程池
*** 好处
**** 降低资源消耗
***** 通过重复利用已创建的线程降低线程创建和销毁造成的消耗
**** 提高响应速度
***** 当任务到达时，任务可以不需要等到线程创建就能立即执行
**** 提高线程的可管理性
***** 进行统一分配、调优和监控
*** Executor
**** Executors
***** 静态工厂类，提供了 Executor、ExecutorService、ScheduledExecutorService、ThreadFactory、Callable 等类的静态工厂方法
**** ThreadPoolExecutor
***** 参数含义
****** corePoolSize
******* 线程池中核心线程的数量
****** maximumPoolSize
******* 线程池中允许的最大线程数
****** keepAliveTime
******* 线程空闲的时间
****** unit
******* keepAliveTime 的单位
****** workQueue
******* 用来保存等待执行的任务的阻塞队列
******* 使用的阻塞队列
******** ArrayBlockingQueue
******** LinkedBlockingQueue
******** SynchronousQueue
******** PriorityBlockingQueue
****** threadFactory
******* 用于设置创建线程的工厂
******* DefaultThreadFactory
****** handler
******* RejectedExecutionHandler，线程池的拒绝策略
******* 分类
******** AbortPolicy：直接抛出异常，默认策略
******** CallerRunsPolicy: 用调用者所在的线程来执行任务
******** DiscardOldestPolicy: 丢弃阻塞队列中靠最前的任务，并执行当前任务
******** DiscardPolicy: 直接丢弃任务
***** 线程池分类
****** newFixedThreadPool
******* 可重用固定线程数的线程池
******* 分析
******** corePoolSize 和 maximumPoolSize 一致
******** 使用 “无界” 队列，LinkedBlockingQueue
******** maximumPoolSize、keepAliveTime、RejectedExecutionHandler 无效
****** newCachedThreadPool
******* 使用单个 worker 线程的 Executor
******* 分析
******** corePoolSize 和 maximumPoolSize 被设置为 1
******** 使用 LinkedBlockingQueue 作为 workerQueue
****** newSingleThreadExecutor
******* 会根据需要创建新线程的线程池
******* 分析
******** corePoolSize 被设置为 0
******** maximumPoolSize 被设置为 Integer.MAX_VALUE
******** SynchronousQueue 作为 WorkerQueue
******** 如果主线程提交任务的速度高于 maxiMumPool 中线程处理任务的速度时，CachedThreadPool 会不断创建心线程，可能会耗尽 CPU 和内存资源
***** 任务提交
****** Executor.execute()
****** ExecutorService.submit()
***** 任务执行
****** 执行流程
***** 线程池调优
****** 两种模型
***** 线程池监控
**** ScheduledThreadPoolExecutor
***** 继承自 ThreadPoolExecutor
***** 给定延迟后执行任务，或者定期执行任务
***** 内部使用 DelayQueue 来实现，会把调度的任务放入 DelayQueue 中，DelayQueue 内部封装 PriorityQueue，这个 priorityQueue 会堆队列中的 ScheduledFutureTask 进行排序
*** Future
**** 异步计算
**** Future
***** 提供操作
****** 执行任务的取消
****** 查询任务是否完成
****** 获取任务的执行结果
**** FutureTask
***** 实现 RunableFuture 接口，既可以作为 Runable 被执行，也可以作为 Future 得到 Callable 的放回置
***** 内部基于 AQS 实现







@endmindmap

@startmindmap















skinparam wrapWidth 200
skinparam maxMessageSize 150
skinparam ComponentStyle uml2
skinparam Shadowing false

skinparam Default {
    FontName "'Input Mono','Microsoft YaHei Mono',Menlo, Monaco, 'Courier New', monospace"
    FontColor #222222
    FontSize  14
    FontStyle plain
    Shadowing false
    TextAlignment center
    BackgroundColor #E3F2FD
    BorderColor #424242
}

skinparam Note {
    BackgroundColor #90A4AE
    BorderColor #90A4AE
    BorderThickness 1
    FontColor White
    Shadowing false
    TextAlignment left
}

skinparam Note<<quit>> {

    BackgroundColor #F9A825
    BorderColor #F9A825
}

skinparam Sequence {
    ActorBorderThickness 1
    LifeLineBorderColor GREEN
    ParticipantBorderThickness 0
    Shadowing false


    GroupBorderThickness 1
    GroupBorderColor #1565C0
    GroupBackgroundColor #BBDEFB
}

skinparam Activity {

    StartColor #37A77C
    EndColor #F6363F
    AttributeFontColor white
    AttributeFontSize  15
    AttributeFontname  Droid Sans Mono

    BackgroundColor #BBDEFB
    BorderColor #90CAF9
    BorderThickness 1

    ArrowThickness 1


    BarColor   #0D47A1


    DiamondBackgroundColor   #FFE0B2
    DiamondBorderColor    #FFCC80


}

skinparam Class {
    BackgroundColor #E3F2FD
    BorderColor #64B5F6
    BorderThickness 1


    StereotypeFontColor #589DF6
    StereotypeFontSize 14
}



skinparam Interface {
    BackgroundColor #E3F2FD
    BorderColor #424242
    FontSize 14


    StereotypeFontColor #589DF6
    StereotypeFontSize 1
}



skinparam Participant {
    BackgroundColor #1565C0
    BorderColor #1565C0
    FontColor White
    Shadowing false
}

skinparam Actor {
    BackgroundColor #1565C0
    BorderColor #1565C0
    Shadowing false
}

skinparam UseCase {
    BackgroundColor #64B5F6
    BorderColor #64B5F6
    Shadowing false
    ArrowThickness 1
    ArrowColor #1565C0

    ActorBackgroundColor #1565C0
    ActorBorderColor #0D47A1
    ActorShadowing false

}


skinparam State {
    FontSize           17

    AttributeFontSize  14

    BackgroundColor    #BBDEFB
    BorderColor        #90CAF9
    StartColor #37A77C
    EndColor #F6363F
}

skinparam Partition {
    BorderColor #424242
    BorderStyle dashed

    BorderThickness 1
}

skinparam rectangle {
    StereotypeFontSize 12
    shadowing false
}

skinparam database {
    StereotypeFontSize 12
    shadowing false
}

skinparam Queue {
    BackgroundColor #E3F2FD
    BorderColor #424242
}
skinparam Agent {
    BackgroundColor #E3F2FD
    BorderColor #424242
}
skinparam Artifact {
    BackgroundColor #E3F2FD
    BorderColor #424242
}

skinparam Boundary {
    BackgroundColor #E3F2FD
    BorderColor #424242
}
skinparam Card {
    BackgroundColor #E3F2FD
    BorderColor #424242
}

skinparam Cloud {
    BackgroundColor #E3F2FD
    BorderColor #424242
}

skinparam Component {
    BackgroundColor #E3F2FD
    BorderColor #424242
}
skinparam Control {
    BackgroundColor #E3F2FD
    BorderColor #424242
}
skinparam Database {
    BackgroundColor #E3F2FD
    BorderColor #424242
}

skinparam Entity {
    BackgroundColor #E3F2FD
    BorderColor #424242
}
skinparam File {
    BackgroundColor #E3F2FD
    BorderColor #424242
}
skinparam Folder {
    BackgroundColor #E3F2FD
    BorderColor #424242

}
skinparam Frame {
    BackgroundColor #E3F2FD
    BorderColor #424242
}
skinparam Node {
    BackgroundColor #E3F2FD
    BorderColor #424242
}


skinparam Package {
    BackgroundColor #E3F2FD
    BorderColor #424242
}
skinparam Stack {
    BackgroundColor #E3F2FD
    BorderColor #424242
}

skinparam Rectangle {
    BackgroundColor #E3F2FD
    BorderColor #424242
}

skinparam Storage {
    BackgroundColor #E3F2FD
    BorderColor #424242
}

skinparam rectangle<<usercase>> {
    Shadowing false
    StereotypeFontSize 0
    FontColor #424242
    BorderColor #424242
    BorderStyle dashed
    BackgroundColor White
}






















skinparam rectangle {
    StereotypeFontSize 12
    shadowing false
}

skinparam database {
    StereotypeFontSize 12
    shadowing false
}

skinparam Arrow {
    Color #616161
    FontColor #616161
    FontSize 12
}

skinparam rectangle<<boundary>> {
    Shadowing false
    StereotypeFontSize 0
    FontColor #424242
    BorderColor #424242
    BorderStyle dashed
    BackgroundColor White
}

















skinparam actor<<person>> {
  BorderColor #0D47A1
  BackgroundColor #1565C0
}

skinparam actor<<internal_person>> {
  BorderColor #424242
  BackgroundColor #616161
}




skinparam rectangle<<person>> {
    StereotypeFontColor #FFFFFF
    FontColor #FFFFFF
    BackgroundColor #1565C0
    BorderColor #0D47A1
}

skinparam rectangle<<external_person>> {
    StereotypeFontColor #FFFFFF
    FontColor #FFFFFF
    BackgroundColor #616161
    BorderColor #424242
}

skinparam rectangle<<system>> {
    StereotypeFontColor #FFFFFF
    FontColor #FFFFFF
    BackgroundColor #1976D2
    BorderColor #1565C0
}

skinparam rectangle<<external_system>> {
    StereotypeFontColor #FFFFFF
    FontColor #FFFFFF
    BackgroundColor #757575
    BorderColor #616161
}

skinparam database<<system>> {
    StereotypeFontColor #FFFFFF
    FontColor #FFFFFF
    BackgroundColor #1976D2
    BorderColor #1565C0
}

skinparam database<<external_system>> {
    StereotypeFontColor #FFFFFF
    FontColor #FFFFFF
    BackgroundColor #757575
    BorderColor #616161
}


















skinparam rectangle<<container>> {
    StereotypeFontColor #FFFFFF
    FontColor #FFFFFF
    BackgroundColor #1E88E5
    BorderColor #1E88E5
}

skinparam database<<container>> {
    StereotypeFontColor #FFFFFF
    FontColor #FFFFFF
    BackgroundColor #1E88E5
    BorderColor #1E88E5
}










skinparam rectangle<<component>> {
    StereotypeFontColor #FFFFFF
    FontColor #222222
    BackgroundColor #90CAF9
    BorderColor #64B5F6
}

skinparam database<<component>> {
    StereotypeFontColor #FFFFFF
    FontColor #222222
    BackgroundColor #90CAF9
    BorderColor #64B5F6
}



























* Java 并发体系

** 1. Java 内存模型（JMM）



*** 线程通信机制
**** 内存共享
***** Java 采用
**** 消息传递

*** 内存模型
**** 重排序
***** 为了程序的性能，处理器、编译器都会对程序进行重排序处理
***** 条件
****** 在单线程环境不能改变程序运行的结果
****** 存在数据依赖关系的不允许重排序
***** 问题
****** 重排序在多线程环境下可能会导致数据不安全

**** 顺序一致性
***** 多线程环境下的理论参考模型
***** 为程序提供了极强的内存可见性保证
***** 特性
****** 一个线程中的所有操作必须按照程序的顺序来致性
****** 所有的线程都只能看到一个单一的操作执行顺序，不管程序是否同步
****** 每个操作都必须原子执行并且对所有线程可见


**** happens-before
***** JVM 中最核心的理论，保证内存可见性
***** JVM 中，如果一个操作的执行结果需要对另一个操作可见，那么这两个操作之间必须存在 happens-before 存在数据依赖关系的不允许重排序
***** 理论
****** 如果一个操作 happens-before 另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作顺序排在第二个操作之前
****** 两个操作之前存在 happens-befoe 关系，并不意味着一定要按照 happens-before 原则指定的顺序来执行，如果，重排序之后的运行结果和 happens-before 运行结果相同，那么这种重排序不非法

**** as-if-serial
***** 所有的操作都可以为了优化而被重排序，但是你必须要保证重排序之后执行的结果不能被改变

*** synchronized
**** 同步、重量级锁
**** 原理
***** synchronized 可以保证方法或者代码块在运行市，同一时刻只有一个方法可以进入临界区，同时，它还可以保证共享变量的内存可见性
**** 锁对象
***** 普通同步方法，锁是当前实例对象
***** 静态同步方法，锁是当前类的 class 对象
***** 同步方法块，锁是括号里的对象
**** 实现机制
***** Java 对象头
****** synchronized 的锁就是保存在Java 对象头中的
****** 包括两部分数据
******* Mark Word(标记字段)
******** Mark Word 被设计成一个非固定的数据结果以便在极小的空间内存储尽量多的数据，它会根据对象的状态复用自己的存储空间
******** 包括
********* 哈希码（HashCode）、GC 分代年龄、锁状态标记、线程持有锁、偏向锁线程Id、偏向时间戳
******* Klass Pointer (类型指针)

***** monitor
****** owner
******* 初始时为 Null 表示当前没有任何线程拥有该 monitor record，当线程成功拥有该锁后保存线程唯一表示，当锁释放时又设置为 Null


**** 锁优化
***** 自旋锁
****** 该线程的等待一段时间，不会被立刻挂起，看持有锁的线程是否会很快释放锁（循环方式）
****** 自旋次数较难控制（-XX:preBlockSpin）
****** 存在理论：线程的频繁挂起、唤醒负担较重， 可以认为每个线程占用锁的时间很短，线程挂起再唤醒得不偿失
****** 缺点
******* 自选次数无法确定
***** 适应性自旋锁
****** 自旋次数不再是确定的，它是由前一次在同一个锁上的自选时间及锁的拥有者的状态来决定
****** 自选成功，则可以增加自旋次数，如果获取锁经常失败，那么自旋次数会减少
***** 锁消除
****** 若不存在数据竞争的情况，JVM会消除锁机制
****** 判断依据
******* 变量逃逸
***** 锁粗化
****** 将多个连续的加锁、解锁操作连接在一起，扩展成一个范围更大的锁。例如 for 循环内部获取锁
***** 轻量级锁
****** 在没有多线程的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗
****** 通过 CAS 来获取锁和释放锁
****** 性能依据
******* 对于绝大部分的锁，在整个生命周期内都是不会存在竞争的
****** 缺点
******* 在多线程情况下，其运行效率比重量级锁还会慢
***** 偏向锁线程
****** 为了在无多线程竞争的情况下尽量较少不必要的轻量级锁的执行路径
****** 主要尽可能避免不必需要的 CAS 操作，如果竞争锁失败，则升级为轻量级锁


*** volatile
**** 特性
***** volatile 可见性：对于 volatile 的读，总可以看到对这个变量最终的写
***** volatile 原子性：volatile 对单个读/写具有原子性（32位Long、Double），但是符合操作除外，例如 i++
**** 实现机制
***** 内存屏障
**** 内存语义
***** 当写一个 volatile 变量时，JMM 会把该线程对应的本地内存中的共享变量值立即刷新到主内存中
***** 当读一个 volatile 变量时，JMM 会把该线程对应的本地内存设置为无效，直接从主内存中读取共享变量
**** 操作系统语义
***** 主存、高速缓存（线程私有）缓存一致
***** 解决方案
****** 通过在总线加 Lock 锁的方式
****** 通过缓存一致性协议（MESI）
**** 内存模型
***** 重排序
***** happens-before




*** dcl()
**** 单例模式
**** DCL
***** 重排序
***** happens-before
**** 解决方案
***** volatile 方案
****** 禁止重排序
***** 基于类初始化的解决方案
****** 利用 ClassLoader 的机制来保证初始化 instance 时就只有一个线程，JVM 在类的初始化阶段会获得一个锁，这个锁可以同步多个线程对同一个类的初始话


** 2. Java 内存模型（JMM）
*** AQS
**** AbstractQueuedSynchronizer，同步器，实现 JUC 核心基础组件
**** 解决了子类实现同步器时涉及的大量细节问题，例如获取同步状态、FIFO同步队列
**** 采用模板模式，AQS 实现了大量通用方法，子类通过继承方式实现其抽象方法来管理同步状态
**** CLH 同步队列
***** FIFO 双向队列，AQS 依赖它来解决同步状态的管理问题
***** 首节点唤醒，等待队列加入到 CLH 同步队列的尾部
**** 同步状态获取与释放
***** 独占式
****** 获取锁
******* 获取同步状态：acquire
******* 响应中断：acquireInterruptibly
******* 超时获取：tryAcquireNanos
****** 释放锁
******* release
***** 共享式
****** 获取锁
******* acquireShared
****** 释放锁
******* releaseShared
**** 线程阻塞与唤醒
***** 当有线程获取锁了，其他再次获取时需要阻塞，当线程释放锁后，AQS负责唤醒线程
***** LockSupport
****** 是用来创建锁和其他同步类的基本线程阻塞原语
****** 每个使用 LockSupport 的线程都会与一个许可关联，如果该许可可用，并且可在进程中使用，则调用 park() 将会立即放回，否则可能阻塞，如果许可尚不可用，则可以调用 unpark 使其可用
****** park()、unPark()
*** CAS
**** Compare And Swap，整个 JUC 体系最核心、最基础理论
**** 内存值 V 、旧的预期值A、要更新的值 B 、当且仅当内存值 V 的值等于旧的预期值 A 时才会将内存之 V 的值修改为 B，否则什么都不干
**** native 中存在四个参数
**** 缺陷
***** 循环时间长
***** 只能保证一个共享变量原子操作
***** ABA 问题
****** 解决方案
******* 版本号
******* AtomicStampedReference



** 3. 锁
*** ReentrantLock
**** 可重入锁，是一种递归无阻塞的同步机制
**** 比 synchronized 更强大、灵活的锁机制，可以减少死锁发生的概率
**** 分为公平锁、非公平锁
**** 底层采用 CAS 实现，通过内部的 Sync 继承 AQS
*** ReentrantReadWriteLock
**** 读写锁，两把锁
***** 共享锁：读锁
***** 排他锁：写锁
**** 锁降级：遵循获取写锁、获取读锁在释放写锁的次序，写锁能够降级成为读锁
*** Condition
**** Lock 提供条件 Condition，对线程的等待、唤醒操作更加详细和灵活
**** 内部维护一个 Condition 队列，当前线程调用 await() 方法，将会以当前线程构成一个节点（Node），并将接待你加入到该队列的尾部

** 4. 并发工具类
*** CyclicBarrier
**** 它允许一组线程互相等待，直到到达某个公共屏障点（common barrier point）
**** 通俗讲：让一组线程达到一个屏障时被阻塞，知道最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会干活
**** 底层采用 ReentrantLock + Condition 实现
**** 应用场景
***** 多线程合并的操作结果，用于多线程计算数据，最后合并计算结果的应用场景
*** CountDownLatch
**** 在完成一组正在其他线程中执行的操作值钱，它允许调用一个或多个线程一直等待
**** 用给定的计数器 初始化 CountDownLatch，由于调用 countDown() 放啊发，所以在技术其到达零之前，await() 方法会一直受阻塞。\n 之后，会释放所有等待的线程，await 的所有后续调用都将立即返回。这种现象只出现一次 - - 计数器无法被重置。如果需要被重新技术，请考虑 CyclicBarrier
**** 与 CyclicBarrier 的区别
***** CountDownLatch 的作用是允许 1 或者 N 个线程等待其他线程完成执行；而 CyclicBarrier 则是允许 N 个线程相互等待
***** CountDownLatch 的计数器无法被重置；CyclicBarrier 的计数器可以被重置后使用，因此它被称为是循环的 barrier
**** 内部采用共享锁来实现
*** Semaphore
**** 信号量
***** 一个控制访问多个共享资源的计数器
**** 从概念上来讲，信号量维护了一个许可集。如果有必要，在许可可用前会阻塞每一个 acquire()，然后再获得许可。每一个 release() 添加一个许可，从而可能释放一个正在阻塞的获取者。\n但是，不使用实际的许可对象，Samphore 只对可用许可的号码进行技术，并采取相应的行动
**** 信号量 Samphore 是一个非负整数（ >=1 ）。当一个线程想要访问某个共享资源是，它必须先获取 Semaphore ，当 Semaphore > 0 时，\n 获取该资源并使 Semaphore -1。如果 Semaphore = 0，则表示全部的共享资源已经被其他线程全部占用，线程必须等待其他线程释放资源。当线程释放资源时，Semaphore +1
**** 应用场景
***** 通常用于限制可以访问某些资源（物理或逻辑的）线程数目
**** 内部采用共享锁实现
*** Exchanger
**** 可以在对中对元素进行配对和交换的线程的同步点
**** 允许在并发任务直中交换数据，具体来说，Exchanger 类允许在两个线程之间定义同步点。\n当两个线程都到到同步点时，他们交换数据结构，因此第一个线程的数据结构进入到第二个线程的数据结构中，第二个线程的数据结构进入到第一个线程中



** 5. 其他
*** ThreadLocal
**** 一种解决多线程环境下成员变量的问题的方案，但是与线程同步无关。\n其思路是为每一个线程创建一个单独的变量副本，从而每个线程都可以独立的改变自己所拥有的变量副本，而不会改变其他线程所对应的副本
**** ThreadLocal 不是用于解决共享变量的问题id额，也不是为了协调线程同步而存在，而是为了方便每个线程处理自己的状态而引入的一个机制
**** 四个方法
***** get(): 返回此线程局部变量的当前副本中的值
***** initiaValue(): 返回此线程局部变量的当前线程的“初始值”
***** remove() ： 移除此线程局部变量当前线程的值
***** set(T value) ：将此线程局部变量的当前线程副本中的值设置为指定值
**** ThreadLocalMap
***** 实现线程隔离机制的关键
***** 每个 Thread 内部都有一个 Threadlocal.ThreadLocalMap 类型中的成员，该成员用来存储实际的 ThreadLocal 变量副本
***** 提供了一种用键值对方式存储每一个线程的变量副本的方法，key 为当前 ThreadLocal 对象，value 则是对应线程的变量副本
**** 注意点
***** ThreadLocal 实例本身是不存储值，它只是提供了一个在当前线程中找到副本值的 key
***** 是 ThreadLocal 包含在 Thread 中，而不是 Thread 包含在 ThreadLocal 中
**** 内存泄漏问题
***** ThreadlocalMap
****** key 弱引用，value 强引用，无法回收
***** 显示调用 remove()
*** Fork/Join
**** 一个用于并行执行任务的框架，是一个把大任务分割成若干个小人物，最终汇总每个小任务结果后得到大人物结果的框架
**** 核心思想
***** “分治”
***** fork 分级任务，join 收集数据
**** 工作窃取
***** 某个线程从其他队列里窃取任务来执行
***** 执行快的线程帮助执行慢的线程执行任务，提升整体任务效率
***** 队列要采用双向队列
**** 核心类
***** ForkJoinPool
****** 执行任务的线程池
***** ForkJoinTask
****** 表示任务，用于 ForkJoinPool 的任务抽象
***** ForkJoinWorkerThread
****** 执行任务的工作线程



** 6. Java 并发集合
*** ConcurrentHashMap
**** CAS + Synchronized 来保证并发更新的安全，底层采用 数组 + 链表/红黑树 的存储结构
**** 重要内部类
***** Node
****** key-value键值对
***** TreeNode
****** 红黑树节点
***** TreeBin
****** 就相当于一个红黑树，其构造方法其实就是构造红黑树的过程
***** ForwardingNode
****** 辅助节点，用于 ConcurrentHashMap 扩容操作
****** sizeCtl
******* 控制标识符，用来控制 table 初始化和扩容操作的
******* 含义
******** 负数代表正在进行初始化或扩容操作
******** -1 代表初始化
******** -N 表示有 N-1 个线程正在进行扩容操作
******** 正数或零代表 hash 表还没有被初始化，这个数值表示初始化或进行下一次扩容的大小
**** 重要操作
***** initTable
****** ConcurrentHashMap 初始化方法
****** 只能由一个线程参与初始化过程，其他线程必须挂起
****** 构造函数不做初始化过程，初始化真正的是 put 操作中出发
****** 步骤
******* sizeCtl < 0 表示正在进行初始化，线程挂起
******* 线程获取初始化资格（CAS(sizeCtl, sc, -1)）进行初始化过程
******* 初始化步骤完成以后，设置 sizeCtl = 0.75*n (下一次扩容的阈值)，表示下一次扩容的大小
***** put
****** 核心思想
******* 根据 hash 值计算节点插入在 table 的位置，如果该位置为空，则直接插入，否则插入到链表或者树中
******* 真是情况较为复杂
****** 步骤
******* table 为 null, 线程进入初始化步骤，如果有其他线程正在进行初始化，该线程挂起
******* 如果插入的当前 i 位置为 null，说明该位置是第一次插入，利用 CAS 插入节点即可，插入成功，则调用 addCount 判断是否需要扩容。若插入失败，则继续匹配（自旋）
******* 若该节点的 hash == MOVED(-1) ，表示有线程正在进行扩容，则进入扩容进程中
******* 其余情况就是按照链表或者红黑树结构插入节点，但是这个过程需要加锁（Synchronized）
***** get
****** 步骤
******* table == null; return null;
******* 从 链表/红黑树 节点获取
***** 扩容
****** 多线程扩容
****** 步骤
******* 构建一个 nextTable，其大小为原来的两倍，这个步骤是在单线程环境下完成的
******* 将原来 table 里边的内容复制到 nextTable 中，这个步骤是允许多线程操作
***** 链表转化为红黑树过程
****** 所在链表的元素个数达到了阈值 8 ，则将链表转换为红黑树
****** 红黑树算法
**** 1.7 和 1.8 的区别

*** ConcurrentLinkedQueue
**** 基于链接节点的无边界的线程安全队列，采用 FIFO 原则对元素进行排序，内部采用 CAS 算法
**** 不变性
***** 在入队的最后一个元素的 next 为 null
***** 队列中所有未删除的节点的 item 都不能为 null，且都能从 head 节点遍历到
***** 对于要删除的节点，不是直接将其设置为 null，而是将其 item 值设置为 null，（迭代器会跳过 item 为 null 的节点）
***** 允许 head 和 tail 更新之后。这是什么意思呢？意思是说 head、tail 不总只想第一个元素和最后一个元素（后面阐述）
**** head 的不变性和可变性
**** tail 的不变性和可变性
**** 精妙之处：利用 CAS 来完成数据操作，同时允许队列的不一致性，弱一致性表现淋漓尽致
*** ConcurrentSkipListMap
**** 第三种 key-value 数据结构：SkipList( 跳表 )
**** skipList
***** 平衡二叉树
***** SkipList 让已排序的数据分布在多层链表中，以 0-1 随机数决定一个数据的向上攀升与否，通过“空间来换取时间”的一个算法，\n 在每个节点中增加了向前的指针，在插入、删除、查找是可以忽略一些不可能涉及的结点，从而提高了效率
***** 特性
****** 由很多层结构组成，level 是通过一定的概率随机产生的
****** 每一层都是一个有序的列表，默认是升序，也可以根据创建映射所提供的 Comparator 进行排序，具体取决于使用的构造方法
****** 最底层（Level 1）的链表所包含所有元素
****** 如果一个元素出现在 Level i 的链表中，则它在 Level i 之下的链表也都会出
****** 每个节点都包含两个指针，一个指向同一个链表中的下一个元素，一个指向下面一层的元素
***** 查找、删除、添加
*** ConcurrentSkipListSet



** 7. Atomic
*** 基本类型类
**** 用于通过原子的方式更新基本类型
**** AtomicBoolean
***** 原子更新布尔类型
**** AtomicInteger
***** 原子更新整形
**** AtomicLong
***** 原子更新长整型
*** 数组
**** 通过原子的方式更新数组里的某个元素
**** AtomicIntegerArray
***** 原子更新整型数组里的元素
**** AtomicLongArray
***** 原子更新长整型数组里的元素
**** AtomicReferenceArray
***** 原子更新引用类型数组里的元素
*** 引用类型
**** 如果要原子的更新多个变量，就需要使用这个原子更新引用类型提供的类
**** AtomicReference
***** 原子更新引用类型
**** AtomicReferenceFieldUpdater
***** 原子更新引用类型里的字段
**** AtomicMarkableReference
***** 原子更新带有白哦极为的引用类型
*** 字段类
**** 如果我们只需要某个类里的某个字段，那么就需要使用原子更新字段类
**** AtomicIntegerFieldUpdater
***** 原子更新整型的字段的更新器
**** AtomicLongFieldUpdater
***** 原子更新长整型字段的更新器
**** AtomicStampedReference
***** 原子更新带有版本号的引用类型


** 8. 阻塞队列
*** ArrayBlockingQueue
**** 一个由数组实现的 FIFO 有界阻塞队列
**** ArrayBlockingQueue 有界且固定，在构造函数时确认大小，确认后不支持改变
**** 在多线程环境下不保证 “公平性”
**** 实现
***** ReentrantLock
***** Condition
*** LinkedBlockingQueue
**** 基于链接、无界的 FIFO 阻塞队列
**** 默认情况下元素采用自然顺序升序排序，可以通过指定 Comparator 来对元素进行排序
**** 二叉堆
***** 分类
***** 最大堆
****** 父节点的键值总是大于或等于任何一个子节点的键值
***** 最小堆
****** 父节点的键值总是小于或等于任何一个子节点的键值
***** 添加操作则是不断 “上冒”，而删除操作则是不断 “下掉”
**** 实现
***** ReentrantLock + Condition
***** 二叉堆
*** DelayQueue
**** 支持延时获取元素的无界阻塞队列
**** 应用
***** 缓存：清掉缓存中超时的缓存数据
***** 任务超时数据
**** 实现
***** ReentrantLock + Condition
***** 根据 Delay 时间排序的优先级队列：PriorityQueue
**** Delayed 接口
***** 用来标记那些应该在给定延迟时间之后执行的对象
***** 该接口要求实现它的实现类必须定义一个 compareTo 方法，该方法提供给此接口的 getDelay 方法一致的排序
*** SynchronousQueue
**** 一个没有容量的阻塞队列
**** 应用
***** 交换工作，生产者的线程和消费者的线程同步以传递某些信息、事件或者任务
**** 难搞懂，与 Exchanger 有一拼
*** LinkedTransferQueue
**** 链表组成的无界阻塞队列
**** 相当于， ConcurrentLinkedQueue、SynchronousQueue(公平模式下)、无界的 LinkedBlockingQueues 等的超集
**** 预占模式
***** 有就直接拿走，没有就占着这个位置直到拿到或者超时或者中断
*** LinkedBlockingDeque
**** 由链表组成的双向阻塞队列
**** 容量可选，在初始化时可以设置容量防止其过度膨胀，如果不设置，默认容量大小为 Integer.MAX_VALUE
**** 运用
***** “工作窃取” 模式


** 9. 线程池
*** 好处
**** 降低资源消耗
***** 通过重复利用已创建的线程降低线程创建和销毁造成的消耗
**** 提高响应速度
***** 当任务到达时，任务可以不需要等到线程创建就能立即执行
**** 提高线程的可管理性
***** 进行统一分配、调优和监控
*** Executor
**** Executors
***** 静态工厂类，提供了 Executor、ExecutorService、ScheduledExecutorService、ThreadFactory、Callable 等类的静态工厂方法
**** ThreadPoolExecutor
***** 参数含义
****** corePoolSize
******* 线程池中核心线程的数量
****** maximumPoolSize
******* 线程池中允许的最大线程数
****** keepAliveTime
******* 线程空闲的时间
****** unit
******* keepAliveTime 的单位
****** workQueue
******* 用来保存等待执行的任务的阻塞队列
******* 使用的阻塞队列
******** ArrayBlockingQueue
******** LinkedBlockingQueue
******** SynchronousQueue
******** PriorityBlockingQueue
****** threadFactory
******* 用于设置创建线程的工厂
******* DefaultThreadFactory
****** handler
******* RejectedExecutionHandler，线程池的拒绝策略
******* 分类
******** AbortPolicy：直接抛出异常，默认策略
******** CallerRunsPolicy: 用调用者所在的线程来执行任务
******** DiscardOldestPolicy: 丢弃阻塞队列中靠最前的任务，并执行当前任务
******** DiscardPolicy: 直接丢弃任务
***** 线程池分类
****** newFixedThreadPool
******* 可重用固定线程数的线程池
******* 分析
******** corePoolSize 和 maximumPoolSize 一致
******** 使用 “无界” 队列，LinkedBlockingQueue
******** maximumPoolSize、keepAliveTime、RejectedExecutionHandler 无效
****** newCachedThreadPool
******* 使用单个 worker 线程的 Executor
******* 分析
******** corePoolSize 和 maximumPoolSize 被设置为 1
******** 使用 LinkedBlockingQueue 作为 workerQueue
****** newSingleThreadExecutor
******* 会根据需要创建新线程的线程池
******* 分析
******** corePoolSize 被设置为 0
******** maximumPoolSize 被设置为 Integer.MAX_VALUE
******** SynchronousQueue 作为 WorkerQueue
******** 如果主线程提交任务的速度高于 maxiMumPool 中线程处理任务的速度时，CachedThreadPool 会不断创建心线程，可能会耗尽 CPU 和内存资源
***** 任务提交
****** Executor.execute()
****** ExecutorService.submit()
***** 任务执行
****** 执行流程
***** 线程池调优
****** 两种模型
***** 线程池监控
**** ScheduledThreadPoolExecutor
***** 继承自 ThreadPoolExecutor
***** 给定延迟后执行任务，或者定期执行任务
***** 内部使用 DelayQueue 来实现，会把调度的任务放入 DelayQueue 中，DelayQueue 内部封装 PriorityQueue，这个 priorityQueue 会堆队列中的 ScheduledFutureTask 进行排序
*** Future
**** 异步计算
**** Future
***** 提供操作
****** 执行任务的取消
****** 查询任务是否完成
****** 获取任务的执行结果
**** FutureTask
***** 实现 RunableFuture 接口，既可以作为 Runable 被执行，也可以作为 Future 得到 Callable 的放回置
***** 内部基于 AQS 实现







@endmindmap

PlantUML version 1.2022.12(Mon Oct 24 02:12:26 CST 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: zh
Country: CN
--></g></svg>